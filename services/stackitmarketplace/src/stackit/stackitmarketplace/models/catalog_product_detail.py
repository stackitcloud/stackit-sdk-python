# coding: utf-8

"""
    STACKIT Marketplace API

    API to manage STACKIT Marketplace.

    The version of the OpenAPI document: 1
    Contact: marketplace@stackit.de
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501 docstring might be too long

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from typing_extensions import Self

from stackit.stackitmarketplace.models.catalog_product_details_vendor import (
    CatalogProductDetailsVendor,
)
from stackit.stackitmarketplace.models.catalog_product_highlight import (
    CatalogProductHighlight,
)
from stackit.stackitmarketplace.models.catalog_product_pricing_option import (
    CatalogProductPricingOption,
)
from stackit.stackitmarketplace.models.catalog_product_support_resource import (
    CatalogProductSupportResource,
)
from stackit.stackitmarketplace.models.catalog_product_vendor_terms import (
    CatalogProductVendorTerms,
)


class CatalogProductDetail(BaseModel):
    """
    CatalogProductDetail
    """

    categories: Optional[List[StrictStr]] = Field(
        default=None, description="The list of categories associated to the product."
    )
    delivery_method: StrictStr = Field(
        description="The product type. For reference: SAAS - Software as a Service, SAI - STACKIT Application Image",
        alias="deliveryMethod",
    )
    description: StrictStr = Field(description="The product description.")
    documentation_url: StrictStr = Field(description="The documentation URL.", alias="documentationUrl")
    highlights: List[CatalogProductHighlight] = Field(description="The list of highlights.")
    is_product_listing: StrictBool = Field(
        description="If true, the product is not fully integrated but only listed. Product listings may not have prices and support information.",
        alias="isProductListing",
    )
    lifecycle_state: StrictStr = Field(description="The lifecycle state of the product.", alias="lifecycleState")
    logo: StrictStr = Field(description="The logo base64 encoded.")
    name: StrictStr = Field(description="The product name.")
    pricing_options: List[CatalogProductPricingOption] = Field(
        description="The list of pricing options.", alias="pricingOptions"
    )
    product_id: StrictStr = Field(description="The product ID.", alias="productId")
    summary: StrictStr = Field(description="The short summary of the product.")
    support_email: Optional[StrictStr] = Field(
        default=None, description="The e-mail address for support inquiries.", alias="supportEmail"
    )
    support_faq: Optional[StrictStr] = Field(default=None, description="The support FAQ URL.", alias="supportFaq")
    support_phone: Optional[StrictStr] = Field(
        default=None, description="The phone number for support inquiries.", alias="supportPhone"
    )
    support_resources: Optional[List[CatalogProductSupportResource]] = Field(
        default=None, description="The list of support resources.", alias="supportResources"
    )
    vendor: CatalogProductDetailsVendor
    vendor_terms: Optional[List[CatalogProductVendorTerms]] = Field(
        default=None, description="The list of terms of use.", alias="vendorTerms"
    )
    video_url: StrictStr = Field(description="The video URL.", alias="videoUrl")
    __properties: ClassVar[List[str]] = [
        "categories",
        "deliveryMethod",
        "description",
        "documentationUrl",
        "highlights",
        "isProductListing",
        "lifecycleState",
        "logo",
        "name",
        "pricingOptions",
        "productId",
        "summary",
        "supportEmail",
        "supportFaq",
        "supportPhone",
        "supportResources",
        "vendor",
        "vendorTerms",
        "videoUrl",
    ]

    @field_validator("delivery_method")
    def delivery_method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["SAAS", "KUBERNETES", "SAI", "PROFESSIONAL_SERVICE"]):
            raise ValueError("must be one of enum values ('SAAS', 'KUBERNETES', 'SAI', 'PROFESSIONAL_SERVICE')")
        return value

    @field_validator("lifecycle_state")
    def lifecycle_state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["PRODUCT_LIVE", "PRODUCT_PREVIEW"]):
            raise ValueError("must be one of enum values ('PRODUCT_LIVE', 'PRODUCT_PREVIEW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CatalogProductDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in highlights (list)
        _items = []
        if self.highlights:
            for _item in self.highlights:
                if _item:
                    _items.append(_item.to_dict())
            _dict["highlights"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pricing_options (list)
        _items = []
        if self.pricing_options:
            for _item in self.pricing_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict["pricingOptions"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in support_resources (list)
        _items = []
        if self.support_resources:
            for _item in self.support_resources:
                if _item:
                    _items.append(_item.to_dict())
            _dict["supportResources"] = _items
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict["vendor"] = self.vendor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in vendor_terms (list)
        _items = []
        if self.vendor_terms:
            for _item in self.vendor_terms:
                if _item:
                    _items.append(_item.to_dict())
            _dict["vendorTerms"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CatalogProductDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "categories": obj.get("categories"),
                "deliveryMethod": obj.get("deliveryMethod"),
                "description": obj.get("description"),
                "documentationUrl": obj.get("documentationUrl"),
                "highlights": (
                    [CatalogProductHighlight.from_dict(_item) for _item in obj["highlights"]]
                    if obj.get("highlights") is not None
                    else None
                ),
                "isProductListing": obj.get("isProductListing"),
                "lifecycleState": obj.get("lifecycleState"),
                "logo": obj.get("logo"),
                "name": obj.get("name"),
                "pricingOptions": (
                    [CatalogProductPricingOption.from_dict(_item) for _item in obj["pricingOptions"]]
                    if obj.get("pricingOptions") is not None
                    else None
                ),
                "productId": obj.get("productId"),
                "summary": obj.get("summary"),
                "supportEmail": obj.get("supportEmail"),
                "supportFaq": obj.get("supportFaq"),
                "supportPhone": obj.get("supportPhone"),
                "supportResources": (
                    [CatalogProductSupportResource.from_dict(_item) for _item in obj["supportResources"]]
                    if obj.get("supportResources") is not None
                    else None
                ),
                "vendor": (
                    CatalogProductDetailsVendor.from_dict(obj["vendor"]) if obj.get("vendor") is not None else None
                ),
                "vendorTerms": (
                    [CatalogProductVendorTerms.from_dict(_item) for _item in obj["vendorTerms"]]
                    if obj.get("vendorTerms") is not None
                    else None
                ),
                "videoUrl": obj.get("videoUrl"),
            }
        )
        return _obj
