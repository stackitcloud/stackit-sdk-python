# coding: utf-8

"""
    STACKIT Marketplace API

    API to manage STACKIT Marketplace.

    The version of the OpenAPI document: 1
    Contact: marketplace@stackit.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Self

from stackit.stackitmarketplace.models.assets_end_user_license_agreement import (
    AssetsEndUserLicenseAgreement,
)
from stackit.stackitmarketplace.models.assets_product_description import (
    AssetsProductDescription,
)
from stackit.stackitmarketplace.models.assets_service_certificate import (
    AssetsServiceCertificate,
)
from stackit.stackitmarketplace.models.assets_service_level_agreement import (
    AssetsServiceLevelAgreement,
)


class Assets(BaseModel):
    """
    The assets associated with the product.
    """  # noqa: E501

    assets_end_user_license_agreement: Optional[AssetsEndUserLicenseAgreement] = Field(
        default=None, alias="assetsEndUserLicenseAgreement"
    )
    assets_product_description: Optional[AssetsProductDescription] = Field(
        default=None, alias="assetsProductDescription"
    )
    assets_service_certificate: Optional[AssetsServiceCertificate] = Field(
        default=None, alias="assetsServiceCertificate"
    )
    assets_service_level_agreement: Optional[AssetsServiceLevelAgreement] = Field(
        default=None, alias="assetsServiceLevelAgreement"
    )
    __properties: ClassVar[List[str]] = [
        "assetsEndUserLicenseAgreement",
        "assetsProductDescription",
        "assetsServiceCertificate",
        "assetsServiceLevelAgreement",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Assets from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of assets_end_user_license_agreement
        if self.assets_end_user_license_agreement:
            _dict["assetsEndUserLicenseAgreement"] = self.assets_end_user_license_agreement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assets_product_description
        if self.assets_product_description:
            _dict["assetsProductDescription"] = self.assets_product_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assets_service_certificate
        if self.assets_service_certificate:
            _dict["assetsServiceCertificate"] = self.assets_service_certificate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assets_service_level_agreement
        if self.assets_service_level_agreement:
            _dict["assetsServiceLevelAgreement"] = self.assets_service_level_agreement.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Assets from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "assetsEndUserLicenseAgreement": (
                    AssetsEndUserLicenseAgreement.from_dict(obj["assetsEndUserLicenseAgreement"])
                    if obj.get("assetsEndUserLicenseAgreement") is not None
                    else None
                ),
                "assetsProductDescription": (
                    AssetsProductDescription.from_dict(obj["assetsProductDescription"])
                    if obj.get("assetsProductDescription") is not None
                    else None
                ),
                "assetsServiceCertificate": (
                    AssetsServiceCertificate.from_dict(obj["assetsServiceCertificate"])
                    if obj.get("assetsServiceCertificate") is not None
                    else None
                ),
                "assetsServiceLevelAgreement": (
                    AssetsServiceLevelAgreement.from_dict(obj["assetsServiceLevelAgreement"])
                    if obj.get("assetsServiceLevelAgreement") is not None
                    else None
                ),
            }
        )
        return _obj
