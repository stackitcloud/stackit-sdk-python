# coding: utf-8

"""
    STACKIT Marketplace API

    API to manage STACKIT Marketplace.

    The version of the OpenAPI document: 1
    Contact: marketplace@stackit.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501 docstring might be too long

from __future__ import annotations

import json
import pprint
from typing import Any, Dict, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    ValidationError,
    field_validator,
)
from typing_extensions import Self

from stackit.stackitmarketplace.models.become_vendor import BecomeVendor
from stackit.stackitmarketplace.models.contact_sales import ContactSales
from stackit.stackitmarketplace.models.register_testing import RegisterTesting
from stackit.stackitmarketplace.models.suggest_product import SuggestProduct


INQUIRIESCREATEINQUIRYPAYLOAD_ONE_OF_SCHEMAS = ["BecomeVendor", "ContactSales", "RegisterTesting", "SuggestProduct"]


class InquiriesCreateInquiryPayload(BaseModel):
    """
    InquiriesCreateInquiryPayload
    """

    # data type: SuggestProduct
    oneof_schema_1_validator: Optional[SuggestProduct] = None
    # data type: ContactSales
    oneof_schema_2_validator: Optional[ContactSales] = None
    # data type: BecomeVendor
    oneof_schema_3_validator: Optional[BecomeVendor] = None
    # data type: RegisterTesting
    oneof_schema_4_validator: Optional[RegisterTesting] = None
    actual_instance: Optional[Union[BecomeVendor, ContactSales, RegisterTesting, SuggestProduct]] = None
    one_of_schemas: Set[str] = {"BecomeVendor", "ContactSales", "RegisterTesting", "SuggestProduct"}

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = InquiriesCreateInquiryPayload.model_construct()
        error_messages = []
        match = 0
        # validate data type: SuggestProduct
        if not isinstance(v, SuggestProduct):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SuggestProduct`")
        else:
            match += 1
        # validate data type: ContactSales
        if not isinstance(v, ContactSales):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ContactSales`")
        else:
            match += 1
        # validate data type: BecomeVendor
        if not isinstance(v, BecomeVendor):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BecomeVendor`")
        else:
            match += 1
        # validate data type: RegisterTesting
        if not isinstance(v, RegisterTesting):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RegisterTesting`")
        else:
            match += 1
        if match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in InquiriesCreateInquiryPayload with oneOf schemas: BecomeVendor, ContactSales, RegisterTesting, SuggestProduct. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into SuggestProduct
        try:
            instance.actual_instance = SuggestProduct.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ContactSales
        try:
            instance.actual_instance = ContactSales.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BecomeVendor
        try:
            instance.actual_instance = BecomeVendor.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RegisterTesting
        try:
            instance.actual_instance = RegisterTesting.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into InquiriesCreateInquiryPayload with oneOf schemas: BecomeVendor, ContactSales, RegisterTesting, SuggestProduct. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into InquiriesCreateInquiryPayload with oneOf schemas: BecomeVendor, ContactSales, RegisterTesting, SuggestProduct. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], BecomeVendor, ContactSales, RegisterTesting, SuggestProduct]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
