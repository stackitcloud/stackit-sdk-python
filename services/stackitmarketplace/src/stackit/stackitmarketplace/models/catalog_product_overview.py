# coding: utf-8

"""
    STACKIT Marketplace API

    API to manage STACKIT Marketplace.

    The version of the OpenAPI document: 1
    Contact: marketplace@stackit.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501 docstring might be too long

from __future__ import annotations

import json
import pprint
import re
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBytes,
    StrictStr,
    field_validator,
)
from typing_extensions import Annotated, Self

from stackit.stackitmarketplace.models.catalog_product_overview_vendor import (
    CatalogProductOverviewVendor,
)
from stackit.stackitmarketplace.models.delivery_method import DeliveryMethod
from stackit.stackitmarketplace.models.product_lifecycle_state import (
    ProductLifecycleState,
)


class CatalogProductOverview(BaseModel):
    """
    CatalogProductOverview
    """

    delivery_method: DeliveryMethod = Field(alias="deliveryMethod")
    lifecycle_state: ProductLifecycleState = Field(alias="lifecycleState")
    logo: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The logo base64 encoded.")
    name: Annotated[str, Field(strict=True, max_length=512)] = Field(description="The name of the product.")
    product_id: object = Field(alias="productId")
    summary: Annotated[str, Field(strict=True, max_length=512)] = Field(description="The short summary of the product.")
    vendor: CatalogProductOverviewVendor
    __properties: ClassVar[List[str]] = [
        "deliveryMethod",
        "lifecycleState",
        "logo",
        "name",
        "productId",
        "summary",
        "vendor",
    ]

    @field_validator("name")
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-ZäüöÄÜÖ0-9,.!?()@\/:=\n\t -]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-ZäüöÄÜÖ0-9,.!?()@\/:=\n\t -]+$/")
        return value

    @field_validator("summary")
    def summary_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-ZäüöÄÜÖ0-9,.!?()@\/:=\n\t -]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-ZäüöÄÜÖ0-9,.!?()@\/:=\n\t -]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CatalogProductOverview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict["vendor"] = self.vendor.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CatalogProductOverview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "deliveryMethod": obj.get("deliveryMethod"),
                "lifecycleState": obj.get("lifecycleState"),
                "logo": obj.get("logo"),
                "name": obj.get("name"),
                "productId": obj.get("productId"),
                "summary": obj.get("summary"),
                "vendor": (
                    CatalogProductOverviewVendor.from_dict(obj["vendor"]) if obj.get("vendor") is not None else None
                ),
            }
        )
        return _obj
