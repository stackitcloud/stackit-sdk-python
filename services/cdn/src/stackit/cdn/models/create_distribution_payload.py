# coding: utf-8

"""
    CDN API

    API used to create and manage your CDN distributions.

    The version of the OpenAPI document: 1beta.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501 docstring might be too long

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Annotated, Self

from stackit.cdn.models.region import Region


class CreateDistributionPayload(BaseModel):
    """
    CreateDistributionPayload
    """

    blocked_countries: Optional[List[StrictStr]] = Field(
        default=None,
        description="Restricts access to your content based on country.  We use the ISO 3166-1 alpha-2 standard for country codes (e.g., DE, ES, GB).  This setting blocks users from the specified countries. ",
        alias="blockedCountries",
    )
    blocked_ips: Optional[List[StrictStr]] = Field(
        default=None,
        description="Restricts access to your content by specifying a list of blocked IPv4 addresses.  This feature enhances security and privacy by preventing these addresses from accessing your distribution. ",
        alias="blockedIPs",
    )
    intent_id: Optional[StrictStr] = Field(
        default=None,
        description="While optional, it is greatly encouraged to provide an `intentId`.  This is used to deduplicate requests.   If multiple POST-Requests with the same `intentId` for a given `projectId` are received, all but the first request are dropped. ",
        alias="intentId",
    )
    monthly_limit_bytes: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(
        default=None,
        description="Sets the monthly limit of bandwidth in bytes that the pullzone is allowed to use. ",
        alias="monthlyLimitBytes",
    )
    origin_request_headers: Optional[Dict[str, StrictStr]] = Field(
        default=None,
        description="Headers that will be sent with every request to the configured origin. WARNING: Do not store sensitive values in the headers. The data is stores as plain text. ",
        alias="originRequestHeaders",
    )
    origin_url: StrictStr = Field(
        description="The origin of the content that should be made available through the CDN.   Note that the path and query parameters are ignored. Ports are allowed. If no protocol is provided, `https` is assumed.   So `www.example.com:1234/somePath?q=123` is normalized to `https://www.example.com:1234` ",
        alias="originUrl",
    )
    regions: Annotated[List[Region], Field(min_length=1)] = Field(
        description="Define in which regions you would like your content to be cached. "
    )
    __properties: ClassVar[List[str]] = [
        "blockedCountries",
        "blockedIPs",
        "intentId",
        "monthlyLimitBytes",
        "originRequestHeaders",
        "originUrl",
        "regions",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateDistributionPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateDistributionPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "blockedCountries": obj.get("blockedCountries"),
                "blockedIPs": obj.get("blockedIPs"),
                "intentId": obj.get("intentId"),
                "monthlyLimitBytes": obj.get("monthlyLimitBytes"),
                "originRequestHeaders": obj.get("originRequestHeaders"),
                "originUrl": obj.get("originUrl"),
                "regions": obj.get("regions"),
            }
        )
        return _obj
