# coding: utf-8

"""
    STACKIT Key Management Service API

    This API provides endpoints for managing keys and key rings. 

    The version of the OpenAPI document: 1beta.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501 docstring might be too long

from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import (
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    validate_call,
)
from stackit.core.configuration import Configuration
from typing_extensions import Annotated

from stackit.kms.api_client import ApiClient, RequestSerialized
from stackit.kms.api_response import ApiResponse
from stackit.kms.models.create_key_payload import CreateKeyPayload
from stackit.kms.models.create_key_ring_payload import CreateKeyRingPayload
from stackit.kms.models.create_wrapping_key_payload import CreateWrappingKeyPayload
from stackit.kms.models.decrypt_payload import DecryptPayload
from stackit.kms.models.decrypted_data import DecryptedData
from stackit.kms.models.encrypt_payload import EncryptPayload
from stackit.kms.models.encrypted_data import EncryptedData
from stackit.kms.models.import_key_payload import ImportKeyPayload
from stackit.kms.models.key import Key
from stackit.kms.models.key_list import KeyList
from stackit.kms.models.key_ring import KeyRing
from stackit.kms.models.key_ring_list import KeyRingList
from stackit.kms.models.sign_payload import SignPayload
from stackit.kms.models.signed_data import SignedData
from stackit.kms.models.verified_data import VerifiedData
from stackit.kms.models.verify_payload import VerifyPayload
from stackit.kms.models.version import Version
from stackit.kms.models.version_list import VersionList
from stackit.kms.models.wrapping_key import WrappingKey
from stackit.kms.models.wrapping_key_list import WrappingKeyList
from stackit.kms.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, configuration: Configuration = None) -> None:
        if configuration is None:
            configuration = Configuration()
        self.configuration = configuration
        self.api_client = ApiClient(self.configuration)

    @validate_call
    def create_key(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        create_key_payload: CreateKeyPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Key:
        """Create key

        Creates a new key for the given key ring.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param create_key_payload: (required)
        :type create_key_payload: CreateKeyPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._create_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            create_key_payload=create_key_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Key",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def create_key_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        create_key_payload: CreateKeyPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Key]:
        """Create key

        Creates a new key for the given key ring.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param create_key_payload: (required)
        :type create_key_payload: CreateKeyPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._create_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            create_key_payload=create_key_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Key",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def create_key_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        create_key_payload: CreateKeyPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create key

        Creates a new key for the given key ring.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param create_key_payload: (required)
        :type create_key_payload: CreateKeyPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._create_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            create_key_payload=create_key_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Key",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _create_key_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        create_key_payload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_key_payload is not None:
            _body_params = create_key_payload

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/keys",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def create_key_ring(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        create_key_ring_payload: CreateKeyRingPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> KeyRing:
        """Create key ring

        Creates a new key ring within the project.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param create_key_ring_payload: (required)
        :type create_key_ring_payload: CreateKeyRingPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._create_key_ring_serialize(
            project_id=project_id,
            region_id=region_id,
            create_key_ring_payload=create_key_ring_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "201": "KeyRing",
            "400": "HttpError",
            "401": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def create_key_ring_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        create_key_ring_payload: CreateKeyRingPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[KeyRing]:
        """Create key ring

        Creates a new key ring within the project.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param create_key_ring_payload: (required)
        :type create_key_ring_payload: CreateKeyRingPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._create_key_ring_serialize(
            project_id=project_id,
            region_id=region_id,
            create_key_ring_payload=create_key_ring_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "201": "KeyRing",
            "400": "HttpError",
            "401": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def create_key_ring_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        create_key_ring_payload: CreateKeyRingPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create key ring

        Creates a new key ring within the project.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param create_key_ring_payload: (required)
        :type create_key_ring_payload: CreateKeyRingPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._create_key_ring_serialize(
            project_id=project_id,
            region_id=region_id,
            create_key_ring_payload=create_key_ring_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "201": "KeyRing",
            "400": "HttpError",
            "401": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _create_key_ring_serialize(
        self,
        project_id,
        region_id,
        create_key_ring_payload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_key_ring_payload is not None:
            _body_params = create_key_ring_payload

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def create_wrapping_key(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        create_wrapping_key_payload: CreateWrappingKeyPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WrappingKey:
        """Create wrapping key

        Creates a new wrapping key for the given key ring.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param create_wrapping_key_payload: (required)
        :type create_wrapping_key_payload: CreateWrappingKeyPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._create_wrapping_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            create_wrapping_key_payload=create_wrapping_key_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "WrappingKey",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def create_wrapping_key_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        create_wrapping_key_payload: CreateWrappingKeyPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WrappingKey]:
        """Create wrapping key

        Creates a new wrapping key for the given key ring.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param create_wrapping_key_payload: (required)
        :type create_wrapping_key_payload: CreateWrappingKeyPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._create_wrapping_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            create_wrapping_key_payload=create_wrapping_key_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "WrappingKey",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def create_wrapping_key_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        create_wrapping_key_payload: CreateWrappingKeyPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create wrapping key

        Creates a new wrapping key for the given key ring.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param create_wrapping_key_payload: (required)
        :type create_wrapping_key_payload: CreateWrappingKeyPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._create_wrapping_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            create_wrapping_key_payload=create_wrapping_key_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "WrappingKey",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _create_wrapping_key_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        create_wrapping_key_payload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_wrapping_key_payload is not None:
            _body_params = create_wrapping_key_payload

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/wrappingkeys",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def decrypt(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        decrypt_payload: DecryptPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DecryptedData:
        """Decrypt

        Decrypts data using the given key version.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param decrypt_payload: (required)
        :type decrypt_payload: DecryptPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._decrypt_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            decrypt_payload=decrypt_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "DecryptedData",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def decrypt_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        decrypt_payload: DecryptPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DecryptedData]:
        """Decrypt

        Decrypts data using the given key version.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param decrypt_payload: (required)
        :type decrypt_payload: DecryptPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._decrypt_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            decrypt_payload=decrypt_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "DecryptedData",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def decrypt_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        decrypt_payload: DecryptPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Decrypt

        Decrypts data using the given key version.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param decrypt_payload: (required)
        :type decrypt_payload: DecryptPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._decrypt_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            decrypt_payload=decrypt_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "DecryptedData",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _decrypt_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        key_id,
        version_number,
        decrypt_payload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        if key_id is not None:
            _path_params["keyId"] = key_id
        if version_number is not None:
            _path_params["versionNumber"] = version_number
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if decrypt_payload is not None:
            _body_params = decrypt_payload

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/keys/{keyId}/versions/{versionNumber}/decrypt",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_key(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete key

        Schedules the deletion of the given key

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._delete_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "202": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_key_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete key

        Schedules the deletion of the given key

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._delete_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "202": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_key_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete key

        Schedules the deletion of the given key

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._delete_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "202": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _delete_key_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        key_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        if key_id is not None:
            _path_params["keyId"] = key_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/keys/{keyId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_key_ring(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete keyring

        Deletes the given key ring if it is empty

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._delete_key_ring_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_key_ring_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete keyring

        Deletes the given key ring if it is empty

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._delete_key_ring_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_key_ring_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete keyring

        Deletes the given key ring if it is empty

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._delete_key_ring_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _delete_key_ring_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def destroy_version(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Destroy version

        Removes the key material of a version permanently.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._destroy_version_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def destroy_version_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Destroy version

        Removes the key material of a version permanently.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._destroy_version_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def destroy_version_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Destroy version

        Removes the key material of a version permanently.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._destroy_version_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _destroy_version_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        key_id,
        version_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        if key_id is not None:
            _path_params["keyId"] = key_id
        if version_number is not None:
            _path_params["versionNumber"] = version_number
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/keys/{keyId}/versions/{versionNumber}/destroy",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def disable_version(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Disable version

        Disables the given version.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._disable_version_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def disable_version_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Disable version

        Disables the given version.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._disable_version_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def disable_version_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Disable version

        Disables the given version.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._disable_version_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _disable_version_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        key_id,
        version_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        if key_id is not None:
            _path_params["keyId"] = key_id
        if version_number is not None:
            _path_params["versionNumber"] = version_number
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/keys/{keyId}/versions/{versionNumber}/disable",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def enable_version(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Enable version

        Enables the given version.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._enable_version_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def enable_version_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Enable version

        Enables the given version.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._enable_version_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def enable_version_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Enable version

        Enables the given version.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._enable_version_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _enable_version_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        key_id,
        version_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        if key_id is not None:
            _path_params["keyId"] = key_id
        if version_number is not None:
            _path_params["versionNumber"] = version_number
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/keys/{keyId}/versions/{versionNumber}/enable",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def encrypt(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        encrypt_payload: EncryptPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EncryptedData:
        """Encrypt

        Encrypts data using the given key version.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param encrypt_payload: (required)
        :type encrypt_payload: EncryptPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._encrypt_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            encrypt_payload=encrypt_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "EncryptedData",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def encrypt_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        encrypt_payload: EncryptPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EncryptedData]:
        """Encrypt

        Encrypts data using the given key version.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param encrypt_payload: (required)
        :type encrypt_payload: EncryptPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._encrypt_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            encrypt_payload=encrypt_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "EncryptedData",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def encrypt_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        encrypt_payload: EncryptPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Encrypt

        Encrypts data using the given key version.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param encrypt_payload: (required)
        :type encrypt_payload: EncryptPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._encrypt_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            encrypt_payload=encrypt_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "EncryptedData",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _encrypt_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        key_id,
        version_number,
        encrypt_payload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        if key_id is not None:
            _path_params["keyId"] = key_id
        if version_number is not None:
            _path_params["versionNumber"] = version_number
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if encrypt_payload is not None:
            _body_params = encrypt_payload

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/keys/{keyId}/versions/{versionNumber}/encrypt",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_key(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Key:
        """Get key

        Returns the details for the given key.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._get_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Key",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_key_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Key]:
        """Get key

        Returns the details for the given key.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._get_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Key",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_key_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get key

        Returns the details for the given key.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._get_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Key",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_key_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        key_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        if key_id is not None:
            _path_params["keyId"] = key_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/keys/{keyId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_key_ring(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> KeyRing:
        """Get key ring

        Returns the details for the given key ring.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._get_key_ring_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "KeyRing",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_key_ring_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[KeyRing]:
        """Get key ring

        Returns the details for the given key ring.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._get_key_ring_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "KeyRing",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_key_ring_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get key ring

        Returns the details for the given key ring.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._get_key_ring_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "KeyRing",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_key_ring_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_version(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Version:
        """Get version

        Returns the details for the given version.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._get_version_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Version",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_version_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Version]:
        """Get version

        Returns the details for the given version.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._get_version_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Version",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_version_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get version

        Returns the details for the given version.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._get_version_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Version",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_version_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        key_id,
        version_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        if key_id is not None:
            _path_params["keyId"] = key_id
        if version_number is not None:
            _path_params["versionNumber"] = version_number
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/keys/{keyId}/versions/{versionNumber}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_wrapping_key(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        wrapping_key_id: Annotated[StrictStr, Field(description="The wrapping key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WrappingKey:
        """Get wrapping key

        Returns the details for the given wrapping key.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param wrapping_key_id: The wrapping key UUID. (required)
        :type wrapping_key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._get_wrapping_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            wrapping_key_id=wrapping_key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "WrappingKey",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_wrapping_key_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        wrapping_key_id: Annotated[StrictStr, Field(description="The wrapping key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WrappingKey]:
        """Get wrapping key

        Returns the details for the given wrapping key.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param wrapping_key_id: The wrapping key UUID. (required)
        :type wrapping_key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._get_wrapping_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            wrapping_key_id=wrapping_key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "WrappingKey",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_wrapping_key_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        wrapping_key_id: Annotated[StrictStr, Field(description="The wrapping key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get wrapping key

        Returns the details for the given wrapping key.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param wrapping_key_id: The wrapping key UUID. (required)
        :type wrapping_key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._get_wrapping_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            wrapping_key_id=wrapping_key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "WrappingKey",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_wrapping_key_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        wrapping_key_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        if wrapping_key_id is not None:
            _path_params["wrappingKeyId"] = wrapping_key_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/wrappingkeys/{wrappingKeyId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def import_key(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        import_key_payload: ImportKeyPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Key:
        """Import key

        Imports a new version to the given key.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param import_key_payload: (required)
        :type import_key_payload: ImportKeyPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._import_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            import_key_payload=import_key_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Key",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def import_key_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        import_key_payload: ImportKeyPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Key]:
        """Import key

        Imports a new version to the given key.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param import_key_payload: (required)
        :type import_key_payload: ImportKeyPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._import_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            import_key_payload=import_key_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Key",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def import_key_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        import_key_payload: ImportKeyPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Import key

        Imports a new version to the given key.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param import_key_payload: (required)
        :type import_key_payload: ImportKeyPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._import_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            import_key_payload=import_key_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Key",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _import_key_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        key_id,
        import_key_payload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        if key_id is not None:
            _path_params["keyId"] = key_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if import_key_payload is not None:
            _body_params = import_key_payload

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/keys/{keyId}/import",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def list_key_rings(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> KeyRingList:
        """List key rings

        Returns a list of all key rings within the project.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._list_key_rings_serialize(
            project_id=project_id,
            region_id=region_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "KeyRingList",
            "400": "HttpError",
            "401": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def list_key_rings_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[KeyRingList]:
        """List key rings

        Returns a list of all key rings within the project.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._list_key_rings_serialize(
            project_id=project_id,
            region_id=region_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "KeyRingList",
            "400": "HttpError",
            "401": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def list_key_rings_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List key rings

        Returns a list of all key rings within the project.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._list_key_rings_serialize(
            project_id=project_id,
            region_id=region_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "KeyRingList",
            "400": "HttpError",
            "401": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _list_key_rings_serialize(
        self,
        project_id,
        region_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def list_keys(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> KeyList:
        """List keys

        Returns the keys for the given key ring.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._list_keys_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "KeyList",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def list_keys_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[KeyList]:
        """List keys

        Returns the keys for the given key ring.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._list_keys_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "KeyList",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def list_keys_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List keys

        Returns the keys for the given key ring.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._list_keys_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "KeyList",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _list_keys_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/keys",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def list_versions(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VersionList:
        """List versions

        Returns a list of all versions of a given key.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._list_versions_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VersionList",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def list_versions_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VersionList]:
        """List versions

        Returns a list of all versions of a given key.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._list_versions_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VersionList",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def list_versions_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List versions

        Returns a list of all versions of a given key.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._list_versions_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VersionList",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _list_versions_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        key_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        if key_id is not None:
            _path_params["keyId"] = key_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/keys/{keyId}/versions",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def list_wrapping_keys(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> WrappingKeyList:
        """List wrapping keys

        Returns the wrapping keys for the given key ring.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._list_wrapping_keys_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "WrappingKeyList",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def list_wrapping_keys_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[WrappingKeyList]:
        """List wrapping keys

        Returns the wrapping keys for the given key ring.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._list_wrapping_keys_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "WrappingKeyList",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def list_wrapping_keys_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List wrapping keys

        Returns the wrapping keys for the given key ring.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._list_wrapping_keys_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "WrappingKeyList",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _list_wrapping_keys_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/wrappingkeys",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def restore_key(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Restore deleted key

        Restores the given key from being deleted.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._restore_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def restore_key_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Restore deleted key

        Restores the given key from being deleted.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._restore_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def restore_key_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Restore deleted key

        Restores the given key from being deleted.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._restore_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _restore_key_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        key_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        if key_id is not None:
            _path_params["keyId"] = key_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/keys/{keyId}/restore",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def restore_version(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Restore version

        Restores the given version from being destroyed

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._restore_version_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def restore_version_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Restore version

        Restores the given version from being destroyed

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._restore_version_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def restore_version_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Restore version

        Restores the given version from being destroyed

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._restore_version_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _restore_version_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        key_id,
        version_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        if key_id is not None:
            _path_params["keyId"] = key_id
        if version_number is not None:
            _path_params["versionNumber"] = version_number
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/keys/{keyId}/versions/{versionNumber}/restore",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def rotate_key(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Key:
        """Rotate key

        Rotates the given key.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._rotate_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Key",
            "400": "HttpError",
            "401": "HttpError",
            "403": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def rotate_key_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Key]:
        """Rotate key

        Rotates the given key.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._rotate_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Key",
            "400": "HttpError",
            "401": "HttpError",
            "403": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def rotate_key_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Rotate key

        Rotates the given key.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._rotate_key_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "Key",
            "400": "HttpError",
            "401": "HttpError",
            "403": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _rotate_key_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        key_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        if key_id is not None:
            _path_params["keyId"] = key_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/keys/{keyId}/rotate",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def sign(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        sign_payload: SignPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SignedData:
        """Sign

        Sign data using the given key version as secret.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param sign_payload: (required)
        :type sign_payload: SignPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._sign_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            sign_payload=sign_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SignedData",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def sign_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        sign_payload: SignPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SignedData]:
        """Sign

        Sign data using the given key version as secret.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param sign_payload: (required)
        :type sign_payload: SignPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._sign_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            sign_payload=sign_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SignedData",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def sign_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        sign_payload: SignPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Sign

        Sign data using the given key version as secret.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param sign_payload: (required)
        :type sign_payload: SignPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._sign_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            sign_payload=sign_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SignedData",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _sign_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        key_id,
        version_number,
        sign_payload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        if key_id is not None:
            _path_params["keyId"] = key_id
        if version_number is not None:
            _path_params["versionNumber"] = version_number
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if sign_payload is not None:
            _body_params = sign_payload

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/keys/{keyId}/versions/{versionNumber}/sign",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def verify(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        verify_payload: VerifyPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VerifiedData:
        """Verify

        Verify data using the given key version as secret.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param verify_payload: (required)
        :type verify_payload: VerifyPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._verify_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            verify_payload=verify_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VerifiedData",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def verify_with_http_info(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        verify_payload: VerifyPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VerifiedData]:
        """Verify

        Verify data using the given key version as secret.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param verify_payload: (required)
        :type verify_payload: VerifyPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._verify_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            verify_payload=verify_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VerifiedData",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def verify_without_preload_content(
        self,
        project_id: Annotated[StrictStr, Field(description="The STACKIT portal project UUID the key ring is part of.")],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the key ring is located in.")],
        key_ring_id: Annotated[StrictStr, Field(description="The key ring UUID.")],
        key_id: Annotated[StrictStr, Field(description="The key UUID.")],
        version_number: Annotated[StrictInt, Field(description="The version number.")],
        verify_payload: VerifyPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Verify

        Verify data using the given key version as secret.

        :param project_id: The STACKIT portal project UUID the key ring is part of. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the key ring is located in. (required)
        :type region_id: str
        :param key_ring_id: The key ring UUID. (required)
        :type key_ring_id: str
        :param key_id: The key UUID. (required)
        :type key_id: str
        :param version_number: The version number. (required)
        :type version_number: int
        :param verify_payload: (required)
        :type verify_payload: VerifyPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501 docstring might be too long

        _param = self._verify_serialize(
            project_id=project_id,
            region_id=region_id,
            key_ring_id=key_ring_id,
            key_id=key_id,
            version_number=version_number,
            verify_payload=verify_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "VerifiedData",
            "400": "HttpError",
            "401": "HttpError",
            "404": "HttpError",
            "409": "HttpError",
            "500": "HttpError",
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _verify_serialize(
        self,
        project_id,
        region_id,
        key_ring_id,
        key_id,
        version_number,
        verify_payload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if key_ring_id is not None:
            _path_params["keyRingId"] = key_ring_id
        if key_id is not None:
            _path_params["keyId"] = key_id
        if version_number is not None:
            _path_params["versionNumber"] = version_number
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if verify_payload is not None:
            _body_params = verify_payload

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/keyrings/{keyRingId}/keys/{keyId}/versions/{versionNumber}/verify",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
