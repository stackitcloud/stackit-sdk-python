# coding: utf-8

"""
    STACKIT Cost API

    The cost API provides detailed reports on the costs for a customer or project over a certain amount of time 

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from datetime import date
from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import (
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    validate_call,
)
from stackit.core.configuration import Configuration
from typing_extensions import Annotated

from stackit.cost.api_client import ApiClient, RequestSerialized
from stackit.cost.api_response import ApiResponse
from stackit.cost.models.list_costs_for_customer200_response_inner import (
    ListCostsForCustomer200ResponseInner,
)
from stackit.cost.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, configuration: Configuration = None) -> None:
        if configuration is None:
            configuration = Configuration()
        self.configuration = configuration
        self.api_client = ApiClient(self.configuration)

    @validate_call
    def list_costs_for_customer(
        self,
        customer_account_id: Annotated[StrictStr, Field(description="ID of a customer account")],
        var_from: Annotated[date, Field(description="Start date (including)")],
        to: Annotated[date, Field(description="End date (including)")],
        depth: Annotated[
            Optional[StrictStr],
            Field(
                description='Depth of desired cost information. "project" provides costs grouped by project, without services. "service" provides costs separated on service level.'
            ),
        ] = None,
        granularity: Annotated[
            Optional[StrictStr],
            Field(
                description='Define granularity of costs – Default is "none" which does NOT include detailed report data.  If "monthly", "weekly" or "yearly" is requested, the "from" parameter SHOULD be the first day and the "to" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If "daily" is requested, the date range defined by "from" and "to" MUST NOT be longer than 92 days.'
            ),
        ] = None,
        include_zero_costs: Annotated[
            Optional[StrictBool], Field(description="Whether costs of 0 should be included in the response")
        ] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Desired content type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ListCostsForCustomer200ResponseInner]:
        """V3 Costs for all projects

        Get costs for all projects in a customer account

        :param customer_account_id: ID of a customer account (required)
        :type customer_account_id: str
        :param var_from: Start date (including) (required)
        :type var_from: date
        :param to: End date (including) (required)
        :type to: date
        :param depth: Depth of desired cost information. \"project\" provides costs grouped by project, without services. \"service\" provides costs separated on service level.
        :type depth: str
        :param granularity: Define granularity of costs – Default is \"none\" which does NOT include detailed report data.  If \"monthly\", \"weekly\" or \"yearly\" is requested, the \"from\" parameter SHOULD be the first day and the \"to\" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If \"daily\" is requested, the date range defined by \"from\" and \"to\" MUST NOT be longer than 92 days.
        :type granularity: str
        :param include_zero_costs: Whether costs of 0 should be included in the response
        :type include_zero_costs: bool
        :param accept: Desired content type
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_costs_for_customer_serialize(
            customer_account_id=customer_account_id,
            var_from=var_from,
            to=to,
            depth=depth,
            granularity=granularity,
            include_zero_costs=include_zero_costs,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[ListCostsForCustomer200ResponseInner]",
            "400": None,
            "401": "object",
            "404": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def list_costs_for_customer_with_http_info(
        self,
        customer_account_id: Annotated[StrictStr, Field(description="ID of a customer account")],
        var_from: Annotated[date, Field(description="Start date (including)")],
        to: Annotated[date, Field(description="End date (including)")],
        depth: Annotated[
            Optional[StrictStr],
            Field(
                description='Depth of desired cost information. "project" provides costs grouped by project, without services. "service" provides costs separated on service level.'
            ),
        ] = None,
        granularity: Annotated[
            Optional[StrictStr],
            Field(
                description='Define granularity of costs – Default is "none" which does NOT include detailed report data.  If "monthly", "weekly" or "yearly" is requested, the "from" parameter SHOULD be the first day and the "to" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If "daily" is requested, the date range defined by "from" and "to" MUST NOT be longer than 92 days.'
            ),
        ] = None,
        include_zero_costs: Annotated[
            Optional[StrictBool], Field(description="Whether costs of 0 should be included in the response")
        ] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Desired content type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ListCostsForCustomer200ResponseInner]]:
        """V3 Costs for all projects

        Get costs for all projects in a customer account

        :param customer_account_id: ID of a customer account (required)
        :type customer_account_id: str
        :param var_from: Start date (including) (required)
        :type var_from: date
        :param to: End date (including) (required)
        :type to: date
        :param depth: Depth of desired cost information. \"project\" provides costs grouped by project, without services. \"service\" provides costs separated on service level.
        :type depth: str
        :param granularity: Define granularity of costs – Default is \"none\" which does NOT include detailed report data.  If \"monthly\", \"weekly\" or \"yearly\" is requested, the \"from\" parameter SHOULD be the first day and the \"to\" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If \"daily\" is requested, the date range defined by \"from\" and \"to\" MUST NOT be longer than 92 days.
        :type granularity: str
        :param include_zero_costs: Whether costs of 0 should be included in the response
        :type include_zero_costs: bool
        :param accept: Desired content type
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_costs_for_customer_serialize(
            customer_account_id=customer_account_id,
            var_from=var_from,
            to=to,
            depth=depth,
            granularity=granularity,
            include_zero_costs=include_zero_costs,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[ListCostsForCustomer200ResponseInner]",
            "400": None,
            "401": "object",
            "404": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def list_costs_for_customer_without_preload_content(
        self,
        customer_account_id: Annotated[StrictStr, Field(description="ID of a customer account")],
        var_from: Annotated[date, Field(description="Start date (including)")],
        to: Annotated[date, Field(description="End date (including)")],
        depth: Annotated[
            Optional[StrictStr],
            Field(
                description='Depth of desired cost information. "project" provides costs grouped by project, without services. "service" provides costs separated on service level.'
            ),
        ] = None,
        granularity: Annotated[
            Optional[StrictStr],
            Field(
                description='Define granularity of costs – Default is "none" which does NOT include detailed report data.  If "monthly", "weekly" or "yearly" is requested, the "from" parameter SHOULD be the first day and the "to" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If "daily" is requested, the date range defined by "from" and "to" MUST NOT be longer than 92 days.'
            ),
        ] = None,
        include_zero_costs: Annotated[
            Optional[StrictBool], Field(description="Whether costs of 0 should be included in the response")
        ] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Desired content type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """V3 Costs for all projects

        Get costs for all projects in a customer account

        :param customer_account_id: ID of a customer account (required)
        :type customer_account_id: str
        :param var_from: Start date (including) (required)
        :type var_from: date
        :param to: End date (including) (required)
        :type to: date
        :param depth: Depth of desired cost information. \"project\" provides costs grouped by project, without services. \"service\" provides costs separated on service level.
        :type depth: str
        :param granularity: Define granularity of costs – Default is \"none\" which does NOT include detailed report data.  If \"monthly\", \"weekly\" or \"yearly\" is requested, the \"from\" parameter SHOULD be the first day and the \"to\" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If \"daily\" is requested, the date range defined by \"from\" and \"to\" MUST NOT be longer than 92 days.
        :type granularity: str
        :param include_zero_costs: Whether costs of 0 should be included in the response
        :type include_zero_costs: bool
        :param accept: Desired content type
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_costs_for_customer_serialize(
            customer_account_id=customer_account_id,
            var_from=var_from,
            to=to,
            depth=depth,
            granularity=granularity,
            include_zero_costs=include_zero_costs,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[ListCostsForCustomer200ResponseInner]",
            "400": None,
            "401": "object",
            "404": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _list_costs_for_customer_serialize(
        self,
        customer_account_id,
        var_from,
        to,
        depth,
        granularity,
        include_zero_costs,
        accept,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if customer_account_id is not None:
            _path_params["customerAccountId"] = customer_account_id
        # process the query parameters
        if var_from is not None:
            if isinstance(var_from, date):
                _query_params.append(("from", var_from.strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(("from", var_from))

        if to is not None:
            if isinstance(to, date):
                _query_params.append(("to", to.strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(("to", to))

        if depth is not None:

            _query_params.append(("depth", depth))

        if granularity is not None:

            _query_params.append(("granularity", granularity))

        if include_zero_costs is not None:

            _query_params.append(("includeZeroCosts", include_zero_costs))

        # process the header parameters
        if accept is not None:
            _header_params["Accept"] = accept
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json", "text/csv"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v3/costs/{customerAccountId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def list_costs_for_project(
        self,
        customer_account_id: Annotated[StrictStr, Field(description="ID of a customer account")],
        project_id: Annotated[StrictStr, Field(description="ID of a project")],
        var_from: Annotated[date, Field(description="Start date (including)")],
        to: Annotated[date, Field(description="End date (including)")],
        depth: Annotated[
            Optional[StrictStr],
            Field(
                description='Depth of desired cost information. "project" provides costs grouped by project, without services. "service" provides costs separated on service level.'
            ),
        ] = None,
        granularity: Annotated[
            Optional[StrictStr],
            Field(
                description='Define granularity of costs – Default is "none" which does NOT include detailed report data.  If "monthly", "weekly" or "yearly" is requested, the "from" parameter SHOULD be the first day and the "to" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If "daily" is requested, the date range defined by "from" and "to" MUST NOT be longer than 92 days.'
            ),
        ] = None,
        include_zero_costs: Annotated[
            Optional[StrictBool], Field(description="Whether costs of 0 should be included in the response")
        ] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Desired content type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListCostsForCustomer200ResponseInner:
        """V3 Costs for a certain project

        Get costs for a certain project in a customer account

        :param customer_account_id: ID of a customer account (required)
        :type customer_account_id: str
        :param project_id: ID of a project (required)
        :type project_id: str
        :param var_from: Start date (including) (required)
        :type var_from: date
        :param to: End date (including) (required)
        :type to: date
        :param depth: Depth of desired cost information. \"project\" provides costs grouped by project, without services. \"service\" provides costs separated on service level.
        :type depth: str
        :param granularity: Define granularity of costs – Default is \"none\" which does NOT include detailed report data.  If \"monthly\", \"weekly\" or \"yearly\" is requested, the \"from\" parameter SHOULD be the first day and the \"to\" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If \"daily\" is requested, the date range defined by \"from\" and \"to\" MUST NOT be longer than 92 days.
        :type granularity: str
        :param include_zero_costs: Whether costs of 0 should be included in the response
        :type include_zero_costs: bool
        :param accept: Desired content type
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_costs_for_project_serialize(
            customer_account_id=customer_account_id,
            project_id=project_id,
            var_from=var_from,
            to=to,
            depth=depth,
            granularity=granularity,
            include_zero_costs=include_zero_costs,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListCostsForCustomer200ResponseInner",
            "400": None,
            "401": "object",
            "404": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def list_costs_for_project_with_http_info(
        self,
        customer_account_id: Annotated[StrictStr, Field(description="ID of a customer account")],
        project_id: Annotated[StrictStr, Field(description="ID of a project")],
        var_from: Annotated[date, Field(description="Start date (including)")],
        to: Annotated[date, Field(description="End date (including)")],
        depth: Annotated[
            Optional[StrictStr],
            Field(
                description='Depth of desired cost information. "project" provides costs grouped by project, without services. "service" provides costs separated on service level.'
            ),
        ] = None,
        granularity: Annotated[
            Optional[StrictStr],
            Field(
                description='Define granularity of costs – Default is "none" which does NOT include detailed report data.  If "monthly", "weekly" or "yearly" is requested, the "from" parameter SHOULD be the first day and the "to" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If "daily" is requested, the date range defined by "from" and "to" MUST NOT be longer than 92 days.'
            ),
        ] = None,
        include_zero_costs: Annotated[
            Optional[StrictBool], Field(description="Whether costs of 0 should be included in the response")
        ] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Desired content type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListCostsForCustomer200ResponseInner]:
        """V3 Costs for a certain project

        Get costs for a certain project in a customer account

        :param customer_account_id: ID of a customer account (required)
        :type customer_account_id: str
        :param project_id: ID of a project (required)
        :type project_id: str
        :param var_from: Start date (including) (required)
        :type var_from: date
        :param to: End date (including) (required)
        :type to: date
        :param depth: Depth of desired cost information. \"project\" provides costs grouped by project, without services. \"service\" provides costs separated on service level.
        :type depth: str
        :param granularity: Define granularity of costs – Default is \"none\" which does NOT include detailed report data.  If \"monthly\", \"weekly\" or \"yearly\" is requested, the \"from\" parameter SHOULD be the first day and the \"to\" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If \"daily\" is requested, the date range defined by \"from\" and \"to\" MUST NOT be longer than 92 days.
        :type granularity: str
        :param include_zero_costs: Whether costs of 0 should be included in the response
        :type include_zero_costs: bool
        :param accept: Desired content type
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_costs_for_project_serialize(
            customer_account_id=customer_account_id,
            project_id=project_id,
            var_from=var_from,
            to=to,
            depth=depth,
            granularity=granularity,
            include_zero_costs=include_zero_costs,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListCostsForCustomer200ResponseInner",
            "400": None,
            "401": "object",
            "404": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def list_costs_for_project_without_preload_content(
        self,
        customer_account_id: Annotated[StrictStr, Field(description="ID of a customer account")],
        project_id: Annotated[StrictStr, Field(description="ID of a project")],
        var_from: Annotated[date, Field(description="Start date (including)")],
        to: Annotated[date, Field(description="End date (including)")],
        depth: Annotated[
            Optional[StrictStr],
            Field(
                description='Depth of desired cost information. "project" provides costs grouped by project, without services. "service" provides costs separated on service level.'
            ),
        ] = None,
        granularity: Annotated[
            Optional[StrictStr],
            Field(
                description='Define granularity of costs – Default is "none" which does NOT include detailed report data.  If "monthly", "weekly" or "yearly" is requested, the "from" parameter SHOULD be the first day and the "to" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If "daily" is requested, the date range defined by "from" and "to" MUST NOT be longer than 92 days.'
            ),
        ] = None,
        include_zero_costs: Annotated[
            Optional[StrictBool], Field(description="Whether costs of 0 should be included in the response")
        ] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Desired content type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """V3 Costs for a certain project

        Get costs for a certain project in a customer account

        :param customer_account_id: ID of a customer account (required)
        :type customer_account_id: str
        :param project_id: ID of a project (required)
        :type project_id: str
        :param var_from: Start date (including) (required)
        :type var_from: date
        :param to: End date (including) (required)
        :type to: date
        :param depth: Depth of desired cost information. \"project\" provides costs grouped by project, without services. \"service\" provides costs separated on service level.
        :type depth: str
        :param granularity: Define granularity of costs – Default is \"none\" which does NOT include detailed report data.  If \"monthly\", \"weekly\" or \"yearly\" is requested, the \"from\" parameter SHOULD be the first day and the \"to\" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If \"daily\" is requested, the date range defined by \"from\" and \"to\" MUST NOT be longer than 92 days.
        :type granularity: str
        :param include_zero_costs: Whether costs of 0 should be included in the response
        :type include_zero_costs: bool
        :param accept: Desired content type
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_costs_for_project_serialize(
            customer_account_id=customer_account_id,
            project_id=project_id,
            var_from=var_from,
            to=to,
            depth=depth,
            granularity=granularity,
            include_zero_costs=include_zero_costs,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListCostsForCustomer200ResponseInner",
            "400": None,
            "401": "object",
            "404": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _list_costs_for_project_serialize(
        self,
        customer_account_id,
        project_id,
        var_from,
        to,
        depth,
        granularity,
        include_zero_costs,
        accept,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if customer_account_id is not None:
            _path_params["customerAccountId"] = customer_account_id
        if project_id is not None:
            _path_params["projectId"] = project_id
        # process the query parameters
        if var_from is not None:
            if isinstance(var_from, date):
                _query_params.append(("from", var_from.strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(("from", var_from))

        if to is not None:
            if isinstance(to, date):
                _query_params.append(("to", to.strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(("to", to))

        if depth is not None:

            _query_params.append(("depth", depth))

        if granularity is not None:

            _query_params.append(("granularity", granularity))

        if include_zero_costs is not None:

            _query_params.append(("includeZeroCosts", include_zero_costs))

        # process the header parameters
        if accept is not None:
            _header_params["Accept"] = accept
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json", "text/csv"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v3/costs/{customerAccountId}/projects/{projectId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def list_costs_for_reseller(
        self,
        customer_account_id: Annotated[StrictStr, Field(description="ID of a customer account")],
        var_from: Annotated[date, Field(description="Start date (including)")],
        to: Annotated[date, Field(description="End date (including)")],
        depth: Annotated[
            Optional[StrictStr],
            Field(
                description='Depth of desired cost information. "project" provides costs grouped by project, without services. "service" provides costs separated on service level.'
            ),
        ] = None,
        granularity: Annotated[
            Optional[StrictStr],
            Field(
                description='Define granularity of costs – Default is "none" which does NOT include detailed report data.  If "monthly", "weekly" or "yearly" is requested, the "from" parameter SHOULD be the first day and the "to" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If "daily" is requested, the date range defined by "from" and "to" MUST NOT be longer than 92 days.'
            ),
        ] = None,
        include_zero_costs: Annotated[
            Optional[StrictBool], Field(description="Whether costs of 0 should be included in the response")
        ] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Desired content type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ListCostsForCustomer200ResponseInner]:
        """V3 Costs for all projects of all related sub-customers

        Get costs for all projects of all related sub-customer accounts

        :param customer_account_id: ID of a customer account (required)
        :type customer_account_id: str
        :param var_from: Start date (including) (required)
        :type var_from: date
        :param to: End date (including) (required)
        :type to: date
        :param depth: Depth of desired cost information. \"project\" provides costs grouped by project, without services. \"service\" provides costs separated on service level.
        :type depth: str
        :param granularity: Define granularity of costs – Default is \"none\" which does NOT include detailed report data.  If \"monthly\", \"weekly\" or \"yearly\" is requested, the \"from\" parameter SHOULD be the first day and the \"to\" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If \"daily\" is requested, the date range defined by \"from\" and \"to\" MUST NOT be longer than 92 days.
        :type granularity: str
        :param include_zero_costs: Whether costs of 0 should be included in the response
        :type include_zero_costs: bool
        :param accept: Desired content type
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_costs_for_reseller_serialize(
            customer_account_id=customer_account_id,
            var_from=var_from,
            to=to,
            depth=depth,
            granularity=granularity,
            include_zero_costs=include_zero_costs,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[ListCostsForCustomer200ResponseInner]",
            "400": None,
            "401": "object",
            "404": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def list_costs_for_reseller_with_http_info(
        self,
        customer_account_id: Annotated[StrictStr, Field(description="ID of a customer account")],
        var_from: Annotated[date, Field(description="Start date (including)")],
        to: Annotated[date, Field(description="End date (including)")],
        depth: Annotated[
            Optional[StrictStr],
            Field(
                description='Depth of desired cost information. "project" provides costs grouped by project, without services. "service" provides costs separated on service level.'
            ),
        ] = None,
        granularity: Annotated[
            Optional[StrictStr],
            Field(
                description='Define granularity of costs – Default is "none" which does NOT include detailed report data.  If "monthly", "weekly" or "yearly" is requested, the "from" parameter SHOULD be the first day and the "to" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If "daily" is requested, the date range defined by "from" and "to" MUST NOT be longer than 92 days.'
            ),
        ] = None,
        include_zero_costs: Annotated[
            Optional[StrictBool], Field(description="Whether costs of 0 should be included in the response")
        ] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Desired content type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ListCostsForCustomer200ResponseInner]]:
        """V3 Costs for all projects of all related sub-customers

        Get costs for all projects of all related sub-customer accounts

        :param customer_account_id: ID of a customer account (required)
        :type customer_account_id: str
        :param var_from: Start date (including) (required)
        :type var_from: date
        :param to: End date (including) (required)
        :type to: date
        :param depth: Depth of desired cost information. \"project\" provides costs grouped by project, without services. \"service\" provides costs separated on service level.
        :type depth: str
        :param granularity: Define granularity of costs – Default is \"none\" which does NOT include detailed report data.  If \"monthly\", \"weekly\" or \"yearly\" is requested, the \"from\" parameter SHOULD be the first day and the \"to\" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If \"daily\" is requested, the date range defined by \"from\" and \"to\" MUST NOT be longer than 92 days.
        :type granularity: str
        :param include_zero_costs: Whether costs of 0 should be included in the response
        :type include_zero_costs: bool
        :param accept: Desired content type
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_costs_for_reseller_serialize(
            customer_account_id=customer_account_id,
            var_from=var_from,
            to=to,
            depth=depth,
            granularity=granularity,
            include_zero_costs=include_zero_costs,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[ListCostsForCustomer200ResponseInner]",
            "400": None,
            "401": "object",
            "404": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def list_costs_for_reseller_without_preload_content(
        self,
        customer_account_id: Annotated[StrictStr, Field(description="ID of a customer account")],
        var_from: Annotated[date, Field(description="Start date (including)")],
        to: Annotated[date, Field(description="End date (including)")],
        depth: Annotated[
            Optional[StrictStr],
            Field(
                description='Depth of desired cost information. "project" provides costs grouped by project, without services. "service" provides costs separated on service level.'
            ),
        ] = None,
        granularity: Annotated[
            Optional[StrictStr],
            Field(
                description='Define granularity of costs – Default is "none" which does NOT include detailed report data.  If "monthly", "weekly" or "yearly" is requested, the "from" parameter SHOULD be the first day and the "to" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If "daily" is requested, the date range defined by "from" and "to" MUST NOT be longer than 92 days.'
            ),
        ] = None,
        include_zero_costs: Annotated[
            Optional[StrictBool], Field(description="Whether costs of 0 should be included in the response")
        ] = None,
        accept: Annotated[Optional[StrictStr], Field(description="Desired content type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """V3 Costs for all projects of all related sub-customers

        Get costs for all projects of all related sub-customer accounts

        :param customer_account_id: ID of a customer account (required)
        :type customer_account_id: str
        :param var_from: Start date (including) (required)
        :type var_from: date
        :param to: End date (including) (required)
        :type to: date
        :param depth: Depth of desired cost information. \"project\" provides costs grouped by project, without services. \"service\" provides costs separated on service level.
        :type depth: str
        :param granularity: Define granularity of costs – Default is \"none\" which does NOT include detailed report data.  If \"monthly\", \"weekly\" or \"yearly\" is requested, the \"from\" parameter SHOULD be the first day and the \"to\" parameter SHOULD be the last day of that time period. If not, they are normalized accordingly.  If \"daily\" is requested, the date range defined by \"from\" and \"to\" MUST NOT be longer than 92 days.
        :type granularity: str
        :param include_zero_costs: Whether costs of 0 should be included in the response
        :type include_zero_costs: bool
        :param accept: Desired content type
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_costs_for_reseller_serialize(
            customer_account_id=customer_account_id,
            var_from=var_from,
            to=to,
            depth=depth,
            granularity=granularity,
            include_zero_costs=include_zero_costs,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[ListCostsForCustomer200ResponseInner]",
            "400": None,
            "401": "object",
            "404": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _list_costs_for_reseller_serialize(
        self,
        customer_account_id,
        var_from,
        to,
        depth,
        granularity,
        include_zero_costs,
        accept,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if customer_account_id is not None:
            _path_params["customerAccountId"] = customer_account_id
        # process the query parameters
        if var_from is not None:
            if isinstance(var_from, date):
                _query_params.append(("from", var_from.strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(("from", var_from))

        if to is not None:
            if isinstance(to, date):
                _query_params.append(("to", to.strftime(self.api_client.configuration.date_format)))
            else:
                _query_params.append(("to", to))

        if depth is not None:

            _query_params.append(("depth", depth))

        if granularity is not None:

            _query_params.append(("granularity", granularity))

        if include_zero_costs is not None:

            _query_params.append(("includeZeroCosts", include_zero_costs))

        # process the header parameters
        if accept is not None:
            _header_params["Accept"] = accept
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json", "text/csv"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v3/costs/{customerAccountId}/customers",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
