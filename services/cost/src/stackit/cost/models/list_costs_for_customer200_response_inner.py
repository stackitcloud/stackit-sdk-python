# coding: utf-8

"""
    STACKIT Cost API

    The cost API provides detailed reports on the costs for a customer or project over a certain amount of time 

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
from typing import TYPE_CHECKING, Any, Dict, Optional, Set, Union

from pydantic import (
    BaseModel,
    ValidationError,
    field_validator,
)
from typing_extensions import Self

from stackit.cost.models.project_costs_with_detailed_services import (
    ProjectCostsWithDetailedServices,
)
from stackit.cost.models.project_costs_with_reports import ProjectCostsWithReports
from stackit.cost.models.project_costs_with_summarized_services import (
    ProjectCostsWithSummarizedServices,
)
from stackit.cost.models.summarized_project_costs import SummarizedProjectCosts


LISTCOSTSFORCUSTOMER200RESPONSEINNER_ANY_OF_SCHEMAS = [
    "ProjectCostsWithDetailedServices",
    "ProjectCostsWithReports",
    "ProjectCostsWithSummarizedServices",
    "SummarizedProjectCosts",
]


class ListCostsForCustomer200ResponseInner(BaseModel):
    """
    ListCostsForCustomer200ResponseInner
    """

    # data type: SummarizedProjectCosts
    anyof_schema_1_validator: Optional[SummarizedProjectCosts] = None
    # data type: ProjectCostsWithReports
    anyof_schema_2_validator: Optional[ProjectCostsWithReports] = None
    # data type: ProjectCostsWithSummarizedServices
    anyof_schema_3_validator: Optional[ProjectCostsWithSummarizedServices] = None
    # data type: ProjectCostsWithDetailedServices
    anyof_schema_4_validator: Optional[ProjectCostsWithDetailedServices] = None
    if TYPE_CHECKING:
        actual_instance: Optional[
            Union[
                ProjectCostsWithDetailedServices,
                ProjectCostsWithReports,
                ProjectCostsWithSummarizedServices,
                SummarizedProjectCosts,
            ]
        ] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = {
        "ProjectCostsWithDetailedServices",
        "ProjectCostsWithReports",
        "ProjectCostsWithSummarizedServices",
        "SummarizedProjectCosts",
    }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_anyof(cls, v):
        instance = ListCostsForCustomer200ResponseInner.model_construct()
        error_messages = []
        # validate data type: SummarizedProjectCosts
        if not isinstance(v, SummarizedProjectCosts):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SummarizedProjectCosts`")
        else:
            return v

        # validate data type: ProjectCostsWithReports
        if not isinstance(v, ProjectCostsWithReports):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProjectCostsWithReports`")
        else:
            return v

        # validate data type: ProjectCostsWithSummarizedServices
        if not isinstance(v, ProjectCostsWithSummarizedServices):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProjectCostsWithSummarizedServices`")
        else:
            return v

        # validate data type: ProjectCostsWithDetailedServices
        if not isinstance(v, ProjectCostsWithDetailedServices):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProjectCostsWithDetailedServices`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError(
                "No match found when setting the actual_instance in ListCostsForCustomer200ResponseInner with anyOf schemas: ProjectCostsWithDetailedServices, ProjectCostsWithReports, ProjectCostsWithSummarizedServices, SummarizedProjectCosts. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[SummarizedProjectCosts] = None
        try:
            instance.actual_instance = SummarizedProjectCosts.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[ProjectCostsWithReports] = None
        try:
            instance.actual_instance = ProjectCostsWithReports.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[ProjectCostsWithSummarizedServices] = None
        try:
            instance.actual_instance = ProjectCostsWithSummarizedServices.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[ProjectCostsWithDetailedServices] = None
        try:
            instance.actual_instance = ProjectCostsWithDetailedServices.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into ListCostsForCustomer200ResponseInner with anyOf schemas: ProjectCostsWithDetailedServices, ProjectCostsWithReports, ProjectCostsWithSummarizedServices, SummarizedProjectCosts. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            ProjectCostsWithDetailedServices,
            ProjectCostsWithReports,
            ProjectCostsWithSummarizedServices,
            SummarizedProjectCosts,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
