# coding: utf-8

"""
    STACKIT Cost API

    The cost API provides detailed reports on the costs for a customer or project over a certain amount of time 

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing_extensions import Annotated, Self

from stackit.cost.models.report_data import ReportData


class DetailedServiceCosts(BaseModel):
    """
    Costs for a single service
    """  # noqa: E501

    report_data: Optional[List[ReportData]] = Field(
        default=None,
        description="Detailed service costs which are ONLY included if granularity is provided",
        alias="reportData",
    )
    service_category_name: Annotated[str, Field(min_length=1, strict=True, max_length=64)] = Field(
        description="Service category name", alias="serviceCategoryName"
    )
    service_name: Annotated[str, Field(min_length=1, strict=True, max_length=128)] = Field(
        description="Name of the service", alias="serviceName"
    )
    sku: Annotated[str, Field(min_length=1, strict=True, max_length=64)] = Field(description="Service key")
    total_charge: Union[StrictFloat, StrictInt] = Field(
        description="Total charge for the whole requested date range (value in cents)", alias="totalCharge"
    )
    total_discount: Union[StrictFloat, StrictInt] = Field(
        description="Total discount for the whole requested date range (value in cents)", alias="totalDiscount"
    )
    total_quantity: StrictInt = Field(description="Total quantity", alias="totalQuantity")
    unit_label: Annotated[str, Field(min_length=1, strict=True, max_length=64)] = Field(
        description="Label for unit", alias="unitLabel"
    )
    __properties: ClassVar[List[str]] = [
        "reportData",
        "serviceCategoryName",
        "serviceName",
        "sku",
        "totalCharge",
        "totalDiscount",
        "totalQuantity",
        "unitLabel",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DetailedServiceCosts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in report_data (list)
        _items = []
        if self.report_data:
            for _item in self.report_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict["reportData"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DetailedServiceCosts from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "reportData": (
                    [ReportData.from_dict(_item) for _item in obj["reportData"]]
                    if obj.get("reportData") is not None
                    else None
                ),
                "serviceCategoryName": obj.get("serviceCategoryName"),
                "serviceName": obj.get("serviceName"),
                "sku": obj.get("sku"),
                "totalCharge": obj.get("totalCharge"),
                "totalDiscount": obj.get("totalDiscount"),
                "totalQuantity": obj.get("totalQuantity"),
                "unitLabel": obj.get("unitLabel"),
            }
        )
        return _obj
