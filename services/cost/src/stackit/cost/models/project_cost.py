# coding: utf-8

"""
    STACKIT Cost API

    The cost API provides detailed reports on the costs for a customer or project over a certain amount of time 

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
from typing import TYPE_CHECKING, Any, Dict, Optional, Set, Union

from pydantic import (
    BaseModel,
    ValidationError,
    field_validator,
)
from typing_extensions import Self

from stackit.cost.models.project_cost_with_detailed_services import (
    ProjectCostWithDetailedServices,
)
from stackit.cost.models.project_cost_with_reports import ProjectCostWithReports
from stackit.cost.models.project_cost_with_summarized_services import (
    ProjectCostWithSummarizedServices,
)
from stackit.cost.models.summarized_project_cost import SummarizedProjectCost


PROJECTCOST_ANY_OF_SCHEMAS = [
    "ProjectCostWithDetailedServices",
    "ProjectCostWithReports",
    "ProjectCostWithSummarizedServices",
    "SummarizedProjectCost",
]


class ProjectCost(BaseModel):
    """
    ProjectCost
    """

    # data type: SummarizedProjectCost
    anyof_schema_1_validator: Optional[SummarizedProjectCost] = None
    # data type: ProjectCostWithReports
    anyof_schema_2_validator: Optional[ProjectCostWithReports] = None
    # data type: ProjectCostWithSummarizedServices
    anyof_schema_3_validator: Optional[ProjectCostWithSummarizedServices] = None
    # data type: ProjectCostWithDetailedServices
    anyof_schema_4_validator: Optional[ProjectCostWithDetailedServices] = None
    if TYPE_CHECKING:
        actual_instance: Optional[
            Union[
                ProjectCostWithDetailedServices,
                ProjectCostWithReports,
                ProjectCostWithSummarizedServices,
                SummarizedProjectCost,
            ]
        ] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = {
        "ProjectCostWithDetailedServices",
        "ProjectCostWithReports",
        "ProjectCostWithSummarizedServices",
        "SummarizedProjectCost",
    }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_anyof(cls, v):
        instance = ProjectCost.model_construct()
        error_messages = []
        # validate data type: SummarizedProjectCost
        if not isinstance(v, SummarizedProjectCost):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SummarizedProjectCost`")
        else:
            return v

        # validate data type: ProjectCostWithReports
        if not isinstance(v, ProjectCostWithReports):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProjectCostWithReports`")
        else:
            return v

        # validate data type: ProjectCostWithSummarizedServices
        if not isinstance(v, ProjectCostWithSummarizedServices):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProjectCostWithSummarizedServices`")
        else:
            return v

        # validate data type: ProjectCostWithDetailedServices
        if not isinstance(v, ProjectCostWithDetailedServices):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProjectCostWithDetailedServices`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError(
                "No match found when setting the actual_instance in ProjectCost with anyOf schemas: ProjectCostWithDetailedServices, ProjectCostWithReports, ProjectCostWithSummarizedServices, SummarizedProjectCost. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[SummarizedProjectCost] = None
        try:
            instance.actual_instance = SummarizedProjectCost.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[ProjectCostWithReports] = None
        try:
            instance.actual_instance = ProjectCostWithReports.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[ProjectCostWithSummarizedServices] = None
        try:
            instance.actual_instance = ProjectCostWithSummarizedServices.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[ProjectCostWithDetailedServices] = None
        try:
            instance.actual_instance = ProjectCostWithDetailedServices.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into ProjectCost with anyOf schemas: ProjectCostWithDetailedServices, ProjectCostWithReports, ProjectCostWithSummarizedServices, SummarizedProjectCost. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            ProjectCostWithDetailedServices,
            ProjectCostWithReports,
            ProjectCostWithSummarizedServices,
            SummarizedProjectCost,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
