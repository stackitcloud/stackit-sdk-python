# coding: utf-8

"""
    STACKIT Cost API

    The cost API provides detailed reports on the costs for a customer or project over a certain amount of time 

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing_extensions import Self

from stackit.cost.models.report_data import ReportData


class ProjectCostsWithReports(BaseModel):
    """
    Detailed costs for a project
    """  # noqa: E501

    customer_account_id: StrictStr = Field(alias="customerAccountId")
    project_id: StrictStr = Field(alias="projectId")
    project_name: StrictStr = Field(alias="projectName")
    report_data: Optional[List[ReportData]] = Field(
        default=None,
        description='Detailed project costs which are ONLY included if granularity is provided AND depth is "project"',
        alias="reportData",
    )
    total_charge: Union[StrictFloat, StrictInt] = Field(
        description="Total charge for all services and the whole requested date range (value in cents)",
        alias="totalCharge",
    )
    total_discount: Union[StrictFloat, StrictInt] = Field(
        description="Total discount for all services and the whole requested date range (value in cents)",
        alias="totalDiscount",
    )
    __properties: ClassVar[List[str]] = [
        "customerAccountId",
        "projectId",
        "projectName",
        "reportData",
        "totalCharge",
        "totalDiscount",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectCostsWithReports from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in report_data (list)
        _items = []
        if self.report_data:
            for _item in self.report_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict["reportData"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectCostsWithReports from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "customerAccountId": obj.get("customerAccountId"),
                "projectId": obj.get("projectId"),
                "projectName": obj.get("projectName"),
                "reportData": (
                    [ReportData.from_dict(_item) for _item in obj["reportData"]]
                    if obj.get("reportData") is not None
                    else None
                ),
                "totalCharge": obj.get("totalCharge"),
                "totalDiscount": obj.get("totalDiscount"),
            }
        )
        return _obj
