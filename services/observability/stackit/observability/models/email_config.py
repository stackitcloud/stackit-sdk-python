# coding: utf-8

"""
    STACKIT Observability API

    API endpoints for Observability on STACKIT

    The version of the OpenAPI document: 1.1.1
    Contact: stackit-argus@mail.schwarz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501 docstring might be too long

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing_extensions import Annotated, Self


class EmailConfig(BaseModel):
    """
    EmailConfig
    """

    auth_identity: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=200)]] = Field(
        default=None, alias="authIdentity"
    )
    auth_password: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=200)]] = Field(
        default=None, alias="authPassword"
    )
    auth_username: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=200)]] = Field(
        default=None, alias="authUsername"
    )
    var_from: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=200)]] = Field(
        default=None, alias="from"
    )
    send_resolved: Optional[StrictBool] = Field(default=False, alias="sendResolved")
    smarthost: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=200)]] = None
    to: Annotated[str, Field(min_length=1, strict=True, max_length=200)]
    __properties: ClassVar[List[str]] = [
        "authIdentity",
        "authPassword",
        "authUsername",
        "from",
        "sendResolved",
        "smarthost",
        "to",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmailConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmailConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "authIdentity": obj.get("authIdentity"),
                "authPassword": obj.get("authPassword"),
                "authUsername": obj.get("authUsername"),
                "from": obj.get("from"),
                "sendResolved": obj.get("sendResolved") if obj.get("sendResolved") is not None else False,
                "smarthost": obj.get("smarthost"),
                "to": obj.get("to"),
            }
        )
        return _obj
