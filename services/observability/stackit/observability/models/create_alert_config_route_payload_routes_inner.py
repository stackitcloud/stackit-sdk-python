# coding: utf-8

"""
    STACKIT Observability API

    API endpoints for Observability on STACKIT

    The version of the OpenAPI document: 1.1.1
    Contact: stackit-argus@mail.schwarz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501 docstring might be too long

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Annotated, Self


class CreateAlertConfigRoutePayloadRoutesInner(BaseModel):
    """
    As in one level above
    """

    group_by: Optional[List[Annotated[str, Field(min_length=1, strict=True, max_length=200)]]] = Field(
        default=None, alias="groupBy"
    )
    group_interval: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=8)]] = Field(
        default=None, description="As in one level above", alias="groupInterval"
    )
    group_wait: Optional[Annotated[str, Field(strict=True, max_length=8)]] = Field(
        default=None, description="As in one level above", alias="groupWait"
    )
    match: Optional[Dict[str, Any]] = Field(default=None, description="As in one level above")
    match_re: Optional[Dict[str, Any]] = Field(default=None, description="As in one level above", alias="matchRe")
    receiver: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=100)]] = Field(
        default=None, description="As in one level above"
    )
    repeat_interval: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=8)]] = Field(
        default=None, description="As in one level above", alias="repeatInterval"
    )
    routes: Optional[List[Dict[str, Any]]] = Field(default=None, description="Another child routes")
    __properties: ClassVar[List[str]] = [
        "groupBy",
        "groupInterval",
        "groupWait",
        "match",
        "matchRe",
        "receiver",
        "repeatInterval",
        "routes",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAlertConfigRoutePayloadRoutesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAlertConfigRoutePayloadRoutesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "groupBy": obj.get("groupBy"),
                "groupInterval": obj.get("groupInterval"),
                "groupWait": obj.get("groupWait"),
                "match": obj.get("match"),
                "matchRe": obj.get("matchRe"),
                "receiver": obj.get("receiver"),
                "repeatInterval": obj.get("repeatInterval"),
                "routes": obj.get("routes"),
            }
        )
        return _obj
