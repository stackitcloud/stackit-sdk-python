# coding: utf-8

"""
    STACKIT Observability API

    API endpoints for Observability on STACKIT

    The version of the OpenAPI document: 1.1.1
    Contact: stackit-argus@mail.schwarz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501 docstring might be too long

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Annotated, Self

from stackit.observability.models.create_alert_config_receiver_payload_email_configs_inner import (
    CreateAlertConfigReceiverPayloadEmailConfigsInner,
)
from stackit.observability.models.create_alert_config_receiver_payload_opsgenie_configs_inner import (
    CreateAlertConfigReceiverPayloadOpsgenieConfigsInner,
)
from stackit.observability.models.create_alert_config_receiver_payload_web_hook_configs_inner import (
    CreateAlertConfigReceiverPayloadWebHookConfigsInner,
)


class CreateAlertConfigReceiverPayload(BaseModel):
    """
    Receivers
    """

    email_configs: Optional[List[CreateAlertConfigReceiverPayloadEmailConfigsInner]] = Field(
        default=None, description="Email configurations", alias="emailConfigs"
    )
    name: Annotated[str, Field(min_length=1, strict=True, max_length=200)] = Field(
        description="`Additional Validators:` * must be unique * should only include the characters: a-zA-Z0-9-"
    )
    opsgenie_configs: Optional[List[CreateAlertConfigReceiverPayloadOpsgenieConfigsInner]] = Field(
        default=None, description="Configuration for ops genie.", alias="opsgenieConfigs"
    )
    web_hook_configs: Optional[List[CreateAlertConfigReceiverPayloadWebHookConfigsInner]] = Field(
        default=None, alias="webHookConfigs"
    )
    __properties: ClassVar[List[str]] = ["emailConfigs", "name", "opsgenieConfigs", "webHookConfigs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAlertConfigReceiverPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in email_configs (list)
        _items = []
        if self.email_configs:
            for _item in self.email_configs:
                if _item:
                    _items.append(_item.to_dict())
            _dict["emailConfigs"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in opsgenie_configs (list)
        _items = []
        if self.opsgenie_configs:
            for _item in self.opsgenie_configs:
                if _item:
                    _items.append(_item.to_dict())
            _dict["opsgenieConfigs"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in web_hook_configs (list)
        _items = []
        if self.web_hook_configs:
            for _item in self.web_hook_configs:
                if _item:
                    _items.append(_item.to_dict())
            _dict["webHookConfigs"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAlertConfigReceiverPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "emailConfigs": (
                    [
                        CreateAlertConfigReceiverPayloadEmailConfigsInner.from_dict(_item)
                        for _item in obj["emailConfigs"]
                    ]
                    if obj.get("emailConfigs") is not None
                    else None
                ),
                "name": obj.get("name"),
                "opsgenieConfigs": (
                    [
                        CreateAlertConfigReceiverPayloadOpsgenieConfigsInner.from_dict(_item)
                        for _item in obj["opsgenieConfigs"]
                    ]
                    if obj.get("opsgenieConfigs") is not None
                    else None
                ),
                "webHookConfigs": (
                    [
                        CreateAlertConfigReceiverPayloadWebHookConfigsInner.from_dict(_item)
                        for _item in obj["webHookConfigs"]
                    ]
                    if obj.get("webHookConfigs") is not None
                    else None
                ),
            }
        )
        return _obj
