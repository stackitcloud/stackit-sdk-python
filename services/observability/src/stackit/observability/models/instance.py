# coding: utf-8

"""
    STACKIT Observability API

    API endpoints for Observability on STACKIT

    The version of the OpenAPI document: 1.1.1
    Contact: stackit-argus@mail.schwarz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501 docstring might be too long

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from typing_extensions import Annotated, Self

from stackit.observability.models.plan_model import PlanModel


class Instance(BaseModel):
    """
    Instance
    """

    cluster: Annotated[str, Field(min_length=1, strict=True, max_length=63)]
    grafana_public_read_access: StrictBool = Field(alias="grafanaPublicReadAccess")
    grafana_use_stackit_sso: StrictBool = Field(alias="grafanaUseStackitSso")
    instance: Annotated[str, Field(min_length=1, strict=True, max_length=63)]
    metrics_retention_time1h: Annotated[int, Field(strict=True, ge=0)] = Field(alias="metricsRetentionTime1h")
    metrics_retention_time5m: Annotated[int, Field(strict=True, ge=0)] = Field(alias="metricsRetentionTime5m")
    metrics_retention_time_raw: Annotated[int, Field(strict=True, ge=0)] = Field(alias="metricsRetentionTimeRaw")
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=300)]] = None
    plan: PlanModel
    state: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "cluster",
        "grafanaPublicReadAccess",
        "grafanaUseStackitSso",
        "instance",
        "metricsRetentionTime1h",
        "metricsRetentionTime5m",
        "metricsRetentionTimeRaw",
        "name",
        "plan",
        "state",
    ]

    @field_validator("state")
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "Component creation started",
                "Component creation failed",
                "Component creation succeeded. Now need to check readiness",
                "Component creation succeeded",
                "Component deletion started",
                "Component deletion failed",
                "Component deletion succeeded",
                "Component deletion of routine succeeded. Now need to check if resources gone",
                "Component deletion buckets succeeded",
                "Component update failed",
                "Component update started",
                "Component update creation succeeded",
                "Component update downgrade deletion resources succeeded",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('Component creation started', 'Component creation failed', 'Component creation succeeded. Now need to check readiness', 'Component creation succeeded', 'Component deletion started', 'Component deletion failed', 'Component deletion succeeded', 'Component deletion of routine succeeded. Now need to check if resources gone', 'Component deletion buckets succeeded', 'Component update failed', 'Component update started', 'Component update creation succeeded', 'Component update downgrade deletion resources succeeded')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Instance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of plan
        if self.plan:
            _dict["plan"] = self.plan.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Instance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "cluster": obj.get("cluster"),
                "grafanaPublicReadAccess": obj.get("grafanaPublicReadAccess"),
                "grafanaUseStackitSso": obj.get("grafanaUseStackitSso"),
                "instance": obj.get("instance"),
                "metricsRetentionTime1h": obj.get("metricsRetentionTime1h"),
                "metricsRetentionTime5m": obj.get("metricsRetentionTime5m"),
                "metricsRetentionTimeRaw": obj.get("metricsRetentionTimeRaw"),
                "name": obj.get("name"),
                "plan": PlanModel.from_dict(obj["plan"]) if obj.get("plan") is not None else None,
                "state": obj.get("state"),
            }
        )
        return _obj
