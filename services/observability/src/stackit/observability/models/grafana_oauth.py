# coding: utf-8

"""
    STACKIT Observability API

    API endpoints for Observability on STACKIT

    The version of the OpenAPI document: 1.1.1
    Contact: stackit-argus@mail.schwarz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501 docstring might be too long

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing_extensions import Annotated, Self


class GrafanaOauth(BaseModel):
    """
    GrafanaOauth
    """

    api_url: Annotated[str, Field(min_length=1, strict=True, max_length=300)] = Field(alias="apiUrl")
    auth_url: Annotated[str, Field(min_length=1, strict=True, max_length=300)] = Field(alias="authUrl")
    enabled: StrictBool
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=300)]] = None
    oauth_client_id: Annotated[str, Field(min_length=1, strict=True, max_length=300)] = Field(alias="oauthClientId")
    oauth_client_secret: Annotated[str, Field(min_length=1, strict=True, max_length=300)] = Field(
        alias="oauthClientSecret"
    )
    role_attribute_path: Annotated[str, Field(min_length=1, strict=True, max_length=500)] = Field(
        alias="roleAttributePath"
    )
    role_attribute_strict: Optional[StrictBool] = Field(default=True, alias="roleAttributeStrict")
    scopes: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=300)]] = "openid profile email"
    token_url: Annotated[str, Field(min_length=1, strict=True, max_length=300)] = Field(alias="tokenUrl")
    use_pkce: Optional[StrictBool] = Field(default=None, alias="usePkce")
    __properties: ClassVar[List[str]] = [
        "apiUrl",
        "authUrl",
        "enabled",
        "name",
        "oauthClientId",
        "oauthClientSecret",
        "roleAttributePath",
        "roleAttributeStrict",
        "scopes",
        "tokenUrl",
        "usePkce",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GrafanaOauth from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GrafanaOauth from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "apiUrl": obj.get("apiUrl"),
                "authUrl": obj.get("authUrl"),
                "enabled": obj.get("enabled"),
                "name": obj.get("name"),
                "oauthClientId": obj.get("oauthClientId"),
                "oauthClientSecret": obj.get("oauthClientSecret"),
                "roleAttributePath": obj.get("roleAttributePath"),
                "roleAttributeStrict": (
                    obj.get("roleAttributeStrict") if obj.get("roleAttributeStrict") is not None else True
                ),
                "scopes": obj.get("scopes") if obj.get("scopes") is not None else "openid profile email",
                "tokenUrl": obj.get("tokenUrl"),
                "usePkce": obj.get("usePkce"),
            }
        )
        return _obj
