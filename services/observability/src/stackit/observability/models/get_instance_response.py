# coding: utf-8

"""
    STACKIT Observability API

    API endpoints for Observability on STACKIT

    The version of the OpenAPI document: 1.1.1
    Contact: stackit-argus@mail.schwarz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501 docstring might be too long

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from typing_extensions import Annotated, Self

from stackit.observability.models.instance_sensitive_data import InstanceSensitiveData


class GetInstanceResponse(BaseModel):
    """
    GetInstanceResponse
    """

    dashboard_url: Annotated[str, Field(min_length=1, strict=True, max_length=500)] = Field(alias="dashboardUrl")
    error: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=200)]] = None
    id: Annotated[str, Field(min_length=1, strict=True, max_length=200)]
    instance: InstanceSensitiveData
    is_updatable: Optional[StrictBool] = Field(default=True, alias="isUpdatable")
    message: Annotated[str, Field(min_length=1, strict=True)]
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=300)]] = None
    parameters: Optional[Dict[str, Optional[StrictStr]]] = None
    plan_id: Annotated[str, Field(min_length=1, strict=True, max_length=200)] = Field(alias="planId")
    plan_name: Annotated[str, Field(min_length=1, strict=True, max_length=200)] = Field(alias="planName")
    plan_schema: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(default="", alias="planSchema")
    service_name: Annotated[str, Field(min_length=1, strict=True, max_length=200)] = Field(alias="serviceName")
    status: StrictStr
    __properties: ClassVar[List[str]] = [
        "dashboardUrl",
        "error",
        "id",
        "instance",
        "isUpdatable",
        "message",
        "name",
        "parameters",
        "planId",
        "planName",
        "planSchema",
        "serviceName",
        "status",
    ]

    @field_validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "CREATING",
                "CREATE_SUCCEEDED",
                "CREATE_FAILED",
                "DELETING",
                "DELETE_SUCCEEDED",
                "DELETE_FAILED",
                "UPDATING",
                "UPDATE_SUCCEEDED",
                "UPDATE_FAILED",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('CREATING', 'CREATE_SUCCEEDED', 'CREATE_FAILED', 'DELETING', 'DELETE_SUCCEEDED', 'DELETE_FAILED', 'UPDATING', 'UPDATE_SUCCEEDED', 'UPDATE_FAILED')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetInstanceResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of instance
        if self.instance:
            _dict["instance"] = self.instance.to_dict()
        # set to None if error (nullable) is None
        # and model_fields_set contains the field
        if self.error is None and "error" in self.model_fields_set:
            _dict["error"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetInstanceResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "dashboardUrl": obj.get("dashboardUrl"),
                "error": obj.get("error"),
                "id": obj.get("id"),
                "instance": (
                    InstanceSensitiveData.from_dict(obj["instance"]) if obj.get("instance") is not None else None
                ),
                "isUpdatable": obj.get("isUpdatable") if obj.get("isUpdatable") is not None else True,
                "message": obj.get("message"),
                "name": obj.get("name"),
                "parameters": obj.get("parameters"),
                "planId": obj.get("planId"),
                "planName": obj.get("planName"),
                "planSchema": obj.get("planSchema") if obj.get("planSchema") is not None else "",
                "serviceName": obj.get("serviceName"),
                "status": obj.get("status"),
            }
        )
        return _obj
