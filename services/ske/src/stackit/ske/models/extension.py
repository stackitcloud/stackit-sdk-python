# coding: utf-8

"""
    SKE-API

    The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict
from typing_extensions import Self

from stackit.ske.models.acl import ACL
from stackit.ske.models.dns import DNS
from stackit.ske.models.observability import Observability


class Extension(BaseModel):
    """
    Extension
    """  # noqa: E501

    acl: Optional[ACL] = None
    dns: Optional[DNS] = None
    observability: Optional[Observability] = None
    __properties: ClassVar[List[str]] = ["acl", "dns", "observability"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Extension from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of acl
        if self.acl:
            _dict["acl"] = self.acl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dns
        if self.dns:
            _dict["dns"] = self.dns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of observability
        if self.observability:
            _dict["observability"] = self.observability.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Extension from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "acl": ACL.from_dict(obj["acl"]) if obj.get("acl") is not None else None,
                "dns": DNS.from_dict(obj["dns"]) if obj.get("dns") is not None else None,
                "observability": (
                    Observability.from_dict(obj["observability"]) if obj.get("observability") is not None else None
                ),
            }
        )
        return _obj
