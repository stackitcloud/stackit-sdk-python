# coding: utf-8

"""
    STACKIT Cloud Foundry API

    API endpoints for managing STACKIT Cloud Foundry

    The version of the OpenAPI document: 1.0.0
    Contact: support@stackit.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Self

from stackit.scf.models.org_role_response import OrgRoleResponse
from stackit.scf.models.space_role_create_response import SpaceRoleCreateResponse


class SpaceRoleCreateBffResponse(BaseModel):
    """
    SpaceRoleCreateBffResponse
    """  # noqa: E501

    org_role: Optional[OrgRoleResponse] = Field(default=None, alias="orgRole")
    space_role: SpaceRoleCreateResponse = Field(alias="spaceRole")
    __properties: ClassVar[List[str]] = ["orgRole", "spaceRole"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpaceRoleCreateBffResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of org_role
        if self.org_role:
            _dict["orgRole"] = self.org_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of space_role
        if self.space_role:
            _dict["spaceRole"] = self.space_role.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpaceRoleCreateBffResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "orgRole": OrgRoleResponse.from_dict(obj["orgRole"]) if obj.get("orgRole") is not None else None,
                "spaceRole": (
                    SpaceRoleCreateResponse.from_dict(obj["spaceRole"]) if obj.get("spaceRole") is not None else None
                ),
            }
        )
        return _obj
