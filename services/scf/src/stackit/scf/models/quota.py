# coding: utf-8

"""
    STACKIT Cloud Foundry API

    API endpoints for managing STACKIT Cloud Foundry

    The version of the OpenAPI document: 1.0.0
    Contact: support@stackit.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from stackit.scf.models.quota_apps import QuotaApps
from stackit.scf.models.quota_domains import QuotaDomains
from stackit.scf.models.quota_routes import QuotaRoutes
from stackit.scf.models.quota_services import QuotaServices


class Quota(BaseModel):
    """
    Quota
    """  # noqa: E501

    apps: QuotaApps
    created_at: datetime = Field(alias="createdAt")
    domains: QuotaDomains
    guid: StrictStr
    name: StrictStr
    org_id: Optional[StrictStr] = Field(default=None, alias="orgId")
    platform_id: StrictStr = Field(alias="platformId")
    project_id: StrictStr = Field(alias="projectId")
    region: StrictStr
    routes: QuotaRoutes
    services: QuotaServices
    updated_at: datetime = Field(alias="updatedAt")
    __properties: ClassVar[List[str]] = [
        "apps",
        "createdAt",
        "domains",
        "guid",
        "name",
        "orgId",
        "platformId",
        "projectId",
        "region",
        "routes",
        "services",
        "updatedAt",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Quota from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of apps
        if self.apps:
            _dict["apps"] = self.apps.to_dict()
        # override the default output from pydantic by calling `to_dict()` of domains
        if self.domains:
            _dict["domains"] = self.domains.to_dict()
        # override the default output from pydantic by calling `to_dict()` of routes
        if self.routes:
            _dict["routes"] = self.routes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of services
        if self.services:
            _dict["services"] = self.services.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Quota from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "apps": QuotaApps.from_dict(obj["apps"]) if obj.get("apps") is not None else None,
                "createdAt": obj.get("createdAt"),
                "domains": QuotaDomains.from_dict(obj["domains"]) if obj.get("domains") is not None else None,
                "guid": obj.get("guid"),
                "name": obj.get("name"),
                "orgId": obj.get("orgId"),
                "platformId": obj.get("platformId"),
                "projectId": obj.get("projectId"),
                "region": obj.get("region"),
                "routes": QuotaRoutes.from_dict(obj["routes"]) if obj.get("routes") is not None else None,
                "services": QuotaServices.from_dict(obj["services"]) if obj.get("services") is not None else None,
                "updatedAt": obj.get("updatedAt"),
            }
        )
        return _obj
