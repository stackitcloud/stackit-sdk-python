# coding: utf-8

"""
    STACKIT Cloud Foundry API

    API endpoints for managing STACKIT Cloud Foundry

    The version of the OpenAPI document: 1.0.0
    Contact: support@stackit.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Self


class OrganizationsListItem(BaseModel):
    """
    OrganizationsListItem
    """  # noqa: E501

    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    guid: StrictStr
    name: Optional[StrictStr] = None
    platform_id: StrictStr = Field(alias="platformId")
    project_id: StrictStr = Field(alias="projectId")
    quota_id: Optional[StrictStr] = Field(default=None, alias="quotaId")
    region: StrictStr
    status: StrictStr = Field(
        description="The organization's status. The status value starts with `deleting` when a deleting request is in progress. The status value starts with `delete_failed` when the deletion failed. The status value can be different from `deleting` and `delete_failed`. Additional details can be provided in the future. "
    )
    suspended: Optional[StrictBool] = None
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    __properties: ClassVar[List[str]] = [
        "createdAt",
        "guid",
        "name",
        "platformId",
        "projectId",
        "quotaId",
        "region",
        "status",
        "suspended",
        "updatedAt",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationsListItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationsListItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "createdAt": obj.get("createdAt"),
                "guid": obj.get("guid"),
                "name": obj.get("name"),
                "platformId": obj.get("platformId"),
                "projectId": obj.get("projectId"),
                "quotaId": obj.get("quotaId"),
                "region": obj.get("region"),
                "status": obj.get("status"),
                "suspended": obj.get("suspended"),
                "updatedAt": obj.get("updatedAt"),
            }
        )
        return _obj
