# coding: utf-8

"""
    STACKIT Cloud Foundry API

    API endpoints for managing STACKIT Cloud Foundry

    The version of the OpenAPI document: 1.0.0
    Contact: support@stackit.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Annotated, Self


class UsageSummary(BaseModel):
    """
    UsageSummary
    """  # noqa: E501

    domains: Annotated[int, Field(strict=True, ge=0)]
    memory_in_mb: Annotated[int, Field(strict=True, ge=0)] = Field(alias="memoryInMb")
    per_app_tasks: Annotated[int, Field(strict=True, ge=0)] = Field(alias="perAppTasks")
    reserved_ports: Annotated[int, Field(strict=True, ge=0)] = Field(alias="reservedPorts")
    routes: Annotated[int, Field(strict=True, ge=0)]
    service_instances: Annotated[int, Field(strict=True, ge=0)] = Field(alias="serviceInstances")
    service_keys: Annotated[int, Field(strict=True, ge=0)] = Field(alias="serviceKeys")
    started_instances: Annotated[int, Field(strict=True, ge=0)] = Field(alias="startedInstances")
    __properties: ClassVar[List[str]] = [
        "domains",
        "memoryInMb",
        "perAppTasks",
        "reservedPorts",
        "routes",
        "serviceInstances",
        "serviceKeys",
        "startedInstances",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsageSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsageSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "domains": obj.get("domains"),
                "memoryInMb": obj.get("memoryInMb"),
                "perAppTasks": obj.get("perAppTasks"),
                "reservedPorts": obj.get("reservedPorts"),
                "routes": obj.get("routes"),
                "serviceInstances": obj.get("serviceInstances"),
                "serviceKeys": obj.get("serviceKeys"),
                "startedInstances": obj.get("startedInstances"),
            }
        )
        return _obj
