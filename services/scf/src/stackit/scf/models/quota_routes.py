# coding: utf-8

"""
    STACKIT Cloud Foundry API

    API endpoints for managing STACKIT Cloud Foundry

    The version of the OpenAPI document: 1.0.0
    Contact: support@stackit.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Annotated, Self


class QuotaRoutes(BaseModel):
    """
    QuotaRoutes
    """  # noqa: E501

    total_reserved_ports: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(
        description="The value `null` means `unlimited`. ", alias="totalReservedPorts"
    )
    total_routes: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(
        description="The value `null` means `unlimited`. ", alias="totalRoutes"
    )
    __properties: ClassVar[List[str]] = ["totalReservedPorts", "totalRoutes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuotaRoutes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if total_reserved_ports (nullable) is None
        # and model_fields_set contains the field
        if self.total_reserved_ports is None and "total_reserved_ports" in self.model_fields_set:
            _dict["totalReservedPorts"] = None

        # set to None if total_routes (nullable) is None
        # and model_fields_set contains the field
        if self.total_routes is None and "total_routes" in self.model_fields_set:
            _dict["totalRoutes"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuotaRoutes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {"totalReservedPorts": obj.get("totalReservedPorts"), "totalRoutes": obj.get("totalRoutes")}
        )
        return _obj
