# coding: utf-8

"""
    STACKIT DNS API

    This api provides dns

    The version of the OpenAPI document: 1.0
    Contact: stackit-dns@mail.schwarz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501 docstring might be too long

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing_extensions import Annotated, Self


class CloneZonePayload(BaseModel):
    """
    metadata to clone a zone.
    """

    adjust_records: Optional[StrictBool] = Field(
        default=None,
        description="Adjust record set content and replace the dns name of the original zone with the new dns name of the cloned zone",
        alias="adjustRecords",
    )
    description: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(
        default=None,
        description="New Description for the cloned zone. Leave empty to use the same description as the original zone",
    )
    dns_name: Annotated[str, Field(min_length=1, strict=True, max_length=253)] = Field(
        description="DnsName is the dns name of the zone to clone", alias="dnsName"
    )
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=63)]] = Field(
        default=None, description="New Name for the cloned zone. Leave empty to use the same name as the original zone"
    )
    __properties: ClassVar[List[str]] = ["adjustRecords", "description", "dnsName", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloneZonePayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloneZonePayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "adjustRecords": obj.get("adjustRecords"),
                "description": obj.get("description"),
                "dnsName": obj.get("dnsName"),
                "name": obj.get("name"),
            }
        )
        return _obj
