# coding: utf-8

"""
    STACKIT DNS API

    This api provides dns

    The version of the OpenAPI document: 1.0
    Contact: dns@stackit.cloud
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501 docstring might be too long

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Annotated, Self

from stackit.dns.models.zone_extensions import ZoneExtensions


class PartialUpdateZonePayload(BaseModel):
    """
    PartialUpdateZonePayload
    """

    acl: Optional[Annotated[str, Field(strict=True, max_length=2000)]] = Field(
        default="0.0.0.0/0,::/0", description="access control list"
    )
    contact_email: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(
        default="hostmaster@stackit.cloud", description="contact e-mail for the zone", alias="contactEmail"
    )
    default_ttl: Optional[Annotated[int, Field(strict=True, ge=60)]] = Field(
        default=3600, description="default time to live", alias="defaultTTL"
    )
    description: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(
        default=None, description="description of the zone"
    )
    expire_time: Optional[Annotated[int, Field(strict=True, ge=60)]] = Field(
        default=1209600, description="expire time", alias="expireTime"
    )
    extensions: Optional[ZoneExtensions] = Field(default=None, description="optional extensions")
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=63)]] = Field(
        default=None, description="user given name"
    )
    negative_cache: Optional[Annotated[int, Field(strict=True, ge=60)]] = Field(
        default=None, description="negative caching", alias="negativeCache"
    )
    primaries: Optional[List[StrictStr]] = Field(default=None, description="primary name server for secondary zone")
    refresh_time: Optional[Annotated[int, Field(strict=True, ge=60)]] = Field(
        default=3600, description="refresh time", alias="refreshTime"
    )
    retry_time: Optional[Annotated[int, Field(strict=True, ge=60)]] = Field(
        default=600, description="retry time", alias="retryTime"
    )
    __properties: ClassVar[List[str]] = [
        "acl",
        "contactEmail",
        "defaultTTL",
        "description",
        "expireTime",
        "extensions",
        "name",
        "negativeCache",
        "primaries",
        "refreshTime",
        "retryTime",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PartialUpdateZonePayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of extensions
        if self.extensions:
            _dict["extensions"] = self.extensions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PartialUpdateZonePayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "acl": obj.get("acl") if obj.get("acl") is not None else "0.0.0.0/0,::/0",
                "contactEmail": (
                    obj.get("contactEmail") if obj.get("contactEmail") is not None else "hostmaster@stackit.cloud"
                ),
                "defaultTTL": obj.get("defaultTTL") if obj.get("defaultTTL") is not None else 3600,
                "description": obj.get("description"),
                "expireTime": obj.get("expireTime") if obj.get("expireTime") is not None else 1209600,
                "extensions": (
                    ZoneExtensions.from_dict(obj["extensions"]) if obj.get("extensions") is not None else None
                ),
                "name": obj.get("name"),
                "negativeCache": obj.get("negativeCache"),
                "primaries": obj.get("primaries"),
                "refreshTime": obj.get("refreshTime") if obj.get("refreshTime") is not None else 3600,
                "retryTime": obj.get("retryTime") if obj.get("retryTime") is not None else 600,
            }
        )
        return _obj
