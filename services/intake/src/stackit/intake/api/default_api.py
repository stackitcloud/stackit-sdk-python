# coding: utf-8

"""
    STACKIT Intake API

    This API provides endpoints for managing Intakes. 

    The version of the OpenAPI document: 1beta.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import (
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    validate_call,
)
from stackit.core.configuration import Configuration
from typing_extensions import Annotated

from stackit.intake.api_client import ApiClient, RequestSerialized
from stackit.intake.api_response import ApiResponse
from stackit.intake.models.create_intake_payload import CreateIntakePayload
from stackit.intake.models.create_intake_runner_payload import CreateIntakeRunnerPayload
from stackit.intake.models.create_intake_user_payload import CreateIntakeUserPayload
from stackit.intake.models.intake_response import IntakeResponse
from stackit.intake.models.intake_runner_response import IntakeRunnerResponse
from stackit.intake.models.intake_user_response import IntakeUserResponse
from stackit.intake.models.list_intake_runners_response import ListIntakeRunnersResponse
from stackit.intake.models.list_intake_users_response import ListIntakeUsersResponse
from stackit.intake.models.list_intakes_response import ListIntakesResponse
from stackit.intake.models.update_intake_payload import UpdateIntakePayload
from stackit.intake.models.update_intake_runner_payload import UpdateIntakeRunnerPayload
from stackit.intake.models.update_intake_user_payload import UpdateIntakeUserPayload
from stackit.intake.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, configuration: Configuration = None) -> None:
        if configuration is None:
            configuration = Configuration()
        self.configuration = configuration
        self.api_client = ApiClient(self.configuration)

    @validate_call
    def create_intake(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        create_intake_payload: CreateIntakePayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IntakeResponse:
        """create_intake

        Creates a new intake within the project.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param create_intake_payload: (required)
        :type create_intake_payload: CreateIntakePayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_intake_serialize(
            project_id=project_id,
            region_id=region_id,
            create_intake_payload=create_intake_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "201": "IntakeResponse",
            "400": None,
            "401": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def create_intake_with_http_info(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        create_intake_payload: CreateIntakePayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IntakeResponse]:
        """create_intake

        Creates a new intake within the project.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param create_intake_payload: (required)
        :type create_intake_payload: CreateIntakePayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_intake_serialize(
            project_id=project_id,
            region_id=region_id,
            create_intake_payload=create_intake_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "201": "IntakeResponse",
            "400": None,
            "401": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def create_intake_without_preload_content(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        create_intake_payload: CreateIntakePayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_intake

        Creates a new intake within the project.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param create_intake_payload: (required)
        :type create_intake_payload: CreateIntakePayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_intake_serialize(
            project_id=project_id,
            region_id=region_id,
            create_intake_payload=create_intake_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "201": "IntakeResponse",
            "400": None,
            "401": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _create_intake_serialize(
        self,
        project_id,
        region_id,
        create_intake_payload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_intake_payload is not None:
            _body_params = create_intake_payload

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/intakes",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def create_intake_runner(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        create_intake_runner_payload: CreateIntakeRunnerPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IntakeRunnerResponse:
        """create_intake_runner

        Creates a new intake runner within the project.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param create_intake_runner_payload: (required)
        :type create_intake_runner_payload: CreateIntakeRunnerPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_intake_runner_serialize(
            project_id=project_id,
            region_id=region_id,
            create_intake_runner_payload=create_intake_runner_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "201": "IntakeRunnerResponse",
            "400": None,
            "401": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def create_intake_runner_with_http_info(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        create_intake_runner_payload: CreateIntakeRunnerPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IntakeRunnerResponse]:
        """create_intake_runner

        Creates a new intake runner within the project.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param create_intake_runner_payload: (required)
        :type create_intake_runner_payload: CreateIntakeRunnerPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_intake_runner_serialize(
            project_id=project_id,
            region_id=region_id,
            create_intake_runner_payload=create_intake_runner_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "201": "IntakeRunnerResponse",
            "400": None,
            "401": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def create_intake_runner_without_preload_content(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        create_intake_runner_payload: CreateIntakeRunnerPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_intake_runner

        Creates a new intake runner within the project.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param create_intake_runner_payload: (required)
        :type create_intake_runner_payload: CreateIntakeRunnerPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_intake_runner_serialize(
            project_id=project_id,
            region_id=region_id,
            create_intake_runner_payload=create_intake_runner_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "201": "IntakeRunnerResponse",
            "400": None,
            "401": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _create_intake_runner_serialize(
        self,
        project_id,
        region_id,
        create_intake_runner_payload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_intake_runner_payload is not None:
            _body_params = create_intake_runner_payload

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/intake-runners",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def create_intake_user(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        create_intake_user_payload: CreateIntakeUserPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IntakeUserResponse:
        """create_intake_user

        Creates a new user for this intake.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param create_intake_user_payload: (required)
        :type create_intake_user_payload: CreateIntakeUserPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_intake_user_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            create_intake_user_payload=create_intake_user_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "201": "IntakeUserResponse",
            "400": None,
            "401": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def create_intake_user_with_http_info(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        create_intake_user_payload: CreateIntakeUserPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IntakeUserResponse]:
        """create_intake_user

        Creates a new user for this intake.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param create_intake_user_payload: (required)
        :type create_intake_user_payload: CreateIntakeUserPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_intake_user_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            create_intake_user_payload=create_intake_user_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "201": "IntakeUserResponse",
            "400": None,
            "401": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def create_intake_user_without_preload_content(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        create_intake_user_payload: CreateIntakeUserPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_intake_user

        Creates a new user for this intake.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param create_intake_user_payload: (required)
        :type create_intake_user_payload: CreateIntakeUserPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_intake_user_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            create_intake_user_payload=create_intake_user_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "201": "IntakeUserResponse",
            "400": None,
            "401": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _create_intake_user_serialize(
        self,
        project_id,
        region_id,
        intake_id,
        create_intake_user_payload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if intake_id is not None:
            _path_params["intakeId"] = intake_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_intake_user_payload is not None:
            _body_params = create_intake_user_payload

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/intakes/{intakeId}/users",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_intake(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        force: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, deletes all child resources. If false, the resource remains in a 'deletion state' while child resources exist."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """delete_intake

        Deletes the given intake.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param force: If true, deletes all child resources. If false, the resource remains in a 'deletion state' while child resources exist.
        :type force: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_intake_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            force=force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "401": None,
            "404": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_intake_with_http_info(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        force: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, deletes all child resources. If false, the resource remains in a 'deletion state' while child resources exist."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """delete_intake

        Deletes the given intake.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param force: If true, deletes all child resources. If false, the resource remains in a 'deletion state' while child resources exist.
        :type force: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_intake_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            force=force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "401": None,
            "404": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_intake_without_preload_content(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        force: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, deletes all child resources. If false, the resource remains in a 'deletion state' while child resources exist."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_intake

        Deletes the given intake.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param force: If true, deletes all child resources. If false, the resource remains in a 'deletion state' while child resources exist.
        :type force: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_intake_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            force=force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "401": None,
            "404": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _delete_intake_serialize(
        self,
        project_id,
        region_id,
        intake_id,
        force,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if intake_id is not None:
            _path_params["intakeId"] = intake_id
        # process the query parameters
        if force is not None:

            _query_params.append(("force", force))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/intakes/{intakeId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_intake_runner(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_runner_id: Annotated[StrictStr, Field(description="The intake runner UUID.")],
        force: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, deletes all child resources. If false, the resource remains in a 'deletion state' while child resources exist."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """delete_intake_runner

        Deletes the given intake runner.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_runner_id: The intake runner UUID. (required)
        :type intake_runner_id: str
        :param force: If true, deletes all child resources. If false, the resource remains in a 'deletion state' while child resources exist.
        :type force: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_intake_runner_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_runner_id=intake_runner_id,
            force=force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "401": None,
            "404": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_intake_runner_with_http_info(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_runner_id: Annotated[StrictStr, Field(description="The intake runner UUID.")],
        force: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, deletes all child resources. If false, the resource remains in a 'deletion state' while child resources exist."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """delete_intake_runner

        Deletes the given intake runner.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_runner_id: The intake runner UUID. (required)
        :type intake_runner_id: str
        :param force: If true, deletes all child resources. If false, the resource remains in a 'deletion state' while child resources exist.
        :type force: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_intake_runner_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_runner_id=intake_runner_id,
            force=force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "401": None,
            "404": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_intake_runner_without_preload_content(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_runner_id: Annotated[StrictStr, Field(description="The intake runner UUID.")],
        force: Annotated[
            Optional[StrictBool],
            Field(
                description="If true, deletes all child resources. If false, the resource remains in a 'deletion state' while child resources exist."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_intake_runner

        Deletes the given intake runner.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_runner_id: The intake runner UUID. (required)
        :type intake_runner_id: str
        :param force: If true, deletes all child resources. If false, the resource remains in a 'deletion state' while child resources exist.
        :type force: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_intake_runner_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_runner_id=intake_runner_id,
            force=force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "401": None,
            "404": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _delete_intake_runner_serialize(
        self,
        project_id,
        region_id,
        intake_runner_id,
        force,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if intake_runner_id is not None:
            _path_params["intakeRunnerId"] = intake_runner_id
        # process the query parameters
        if force is not None:

            _query_params.append(("force", force))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/intake-runners/{intakeRunnerId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def delete_intake_user(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        intake_user_id: Annotated[StrictStr, Field(description="The intake user UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """delete_intake_user

        Deletes the given intake user.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param intake_user_id: The intake user UUID. (required)
        :type intake_user_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_intake_user_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            intake_user_id=intake_user_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "401": None,
            "404": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def delete_intake_user_with_http_info(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        intake_user_id: Annotated[StrictStr, Field(description="The intake user UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """delete_intake_user

        Deletes the given intake user.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param intake_user_id: The intake user UUID. (required)
        :type intake_user_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_intake_user_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            intake_user_id=intake_user_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "401": None,
            "404": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def delete_intake_user_without_preload_content(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        intake_user_id: Annotated[StrictStr, Field(description="The intake user UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_intake_user

        Deletes the given intake user.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param intake_user_id: The intake user UUID. (required)
        :type intake_user_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_intake_user_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            intake_user_id=intake_user_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "401": None,
            "404": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _delete_intake_user_serialize(
        self,
        project_id,
        region_id,
        intake_id,
        intake_user_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if intake_id is not None:
            _path_params["intakeId"] = intake_id
        if intake_user_id is not None:
            _path_params["intakeUserId"] = intake_user_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="DELETE",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/intakes/{intakeId}/users/{intakeUserId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_intake(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IntakeResponse:
        """get_intake

        Returns the details for the given intake.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_intake_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "IntakeResponse",
            "401": None,
            "404": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_intake_with_http_info(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IntakeResponse]:
        """get_intake

        Returns the details for the given intake.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_intake_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "IntakeResponse",
            "401": None,
            "404": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_intake_without_preload_content(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_intake

        Returns the details for the given intake.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_intake_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "IntakeResponse",
            "401": None,
            "404": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_intake_serialize(
        self,
        project_id,
        region_id,
        intake_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if intake_id is not None:
            _path_params["intakeId"] = intake_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/intakes/{intakeId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_intake_runner(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_runner_id: Annotated[StrictStr, Field(description="The intake runner UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IntakeRunnerResponse:
        """get_intake_runner

        Returns the details for the given intake runner.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_runner_id: The intake runner UUID. (required)
        :type intake_runner_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_intake_runner_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_runner_id=intake_runner_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "IntakeRunnerResponse",
            "401": None,
            "404": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_intake_runner_with_http_info(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_runner_id: Annotated[StrictStr, Field(description="The intake runner UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IntakeRunnerResponse]:
        """get_intake_runner

        Returns the details for the given intake runner.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_runner_id: The intake runner UUID. (required)
        :type intake_runner_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_intake_runner_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_runner_id=intake_runner_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "IntakeRunnerResponse",
            "401": None,
            "404": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_intake_runner_without_preload_content(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_runner_id: Annotated[StrictStr, Field(description="The intake runner UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_intake_runner

        Returns the details for the given intake runner.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_runner_id: The intake runner UUID. (required)
        :type intake_runner_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_intake_runner_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_runner_id=intake_runner_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "IntakeRunnerResponse",
            "401": None,
            "404": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_intake_runner_serialize(
        self,
        project_id,
        region_id,
        intake_runner_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if intake_runner_id is not None:
            _path_params["intakeRunnerId"] = intake_runner_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/intake-runners/{intakeRunnerId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_intake_user(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        intake_user_id: Annotated[StrictStr, Field(description="The intake user UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IntakeUserResponse:
        """get_intake_user

        Returns the details for the given user.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param intake_user_id: The intake user UUID. (required)
        :type intake_user_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_intake_user_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            intake_user_id=intake_user_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "IntakeUserResponse",
            "401": None,
            "404": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_intake_user_with_http_info(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        intake_user_id: Annotated[StrictStr, Field(description="The intake user UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IntakeUserResponse]:
        """get_intake_user

        Returns the details for the given user.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param intake_user_id: The intake user UUID. (required)
        :type intake_user_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_intake_user_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            intake_user_id=intake_user_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "IntakeUserResponse",
            "401": None,
            "404": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_intake_user_without_preload_content(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        intake_user_id: Annotated[StrictStr, Field(description="The intake user UUID.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_intake_user

        Returns the details for the given user.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param intake_user_id: The intake user UUID. (required)
        :type intake_user_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_intake_user_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            intake_user_id=intake_user_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "IntakeUserResponse",
            "401": None,
            "404": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _get_intake_user_serialize(
        self,
        project_id,
        region_id,
        intake_id,
        intake_user_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if intake_id is not None:
            _path_params["intakeId"] = intake_id
        if intake_user_id is not None:
            _path_params["intakeUserId"] = intake_user_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/intakes/{intakeId}/users/{intakeUserId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def list_intake_runners(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        page_token: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=1024)]],
            Field(description="A token to retrieve the next page of results."),
        ] = None,
        page_size: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Maximum number of items to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListIntakeRunnersResponse:
        """list_intake_runners

        Returns a list of all intake runners within the project.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param page_token: A token to retrieve the next page of results.
        :type page_token: str
        :param page_size: Maximum number of items to return
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_intake_runners_serialize(
            project_id=project_id,
            region_id=region_id,
            page_token=page_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListIntakeRunnersResponse",
            "401": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def list_intake_runners_with_http_info(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        page_token: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=1024)]],
            Field(description="A token to retrieve the next page of results."),
        ] = None,
        page_size: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Maximum number of items to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListIntakeRunnersResponse]:
        """list_intake_runners

        Returns a list of all intake runners within the project.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param page_token: A token to retrieve the next page of results.
        :type page_token: str
        :param page_size: Maximum number of items to return
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_intake_runners_serialize(
            project_id=project_id,
            region_id=region_id,
            page_token=page_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListIntakeRunnersResponse",
            "401": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def list_intake_runners_without_preload_content(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        page_token: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=1024)]],
            Field(description="A token to retrieve the next page of results."),
        ] = None,
        page_size: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Maximum number of items to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_intake_runners

        Returns a list of all intake runners within the project.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param page_token: A token to retrieve the next page of results.
        :type page_token: str
        :param page_size: Maximum number of items to return
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_intake_runners_serialize(
            project_id=project_id,
            region_id=region_id,
            page_token=page_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListIntakeRunnersResponse",
            "401": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _list_intake_runners_serialize(
        self,
        project_id,
        region_id,
        page_token,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        # process the query parameters
        if page_token is not None:

            _query_params.append(("pageToken", page_token))

        if page_size is not None:

            _query_params.append(("pageSize", page_size))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/intake-runners",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def list_intake_users(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        page_token: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=1024)]],
            Field(description="A token to retrieve the next page of results."),
        ] = None,
        page_size: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Maximum number of items to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListIntakeUsersResponse:
        """list_intake_users

        Returns a list of all intake users within the project and intake.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param page_token: A token to retrieve the next page of results.
        :type page_token: str
        :param page_size: Maximum number of items to return
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_intake_users_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            page_token=page_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListIntakeUsersResponse",
            "401": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def list_intake_users_with_http_info(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        page_token: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=1024)]],
            Field(description="A token to retrieve the next page of results."),
        ] = None,
        page_size: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Maximum number of items to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListIntakeUsersResponse]:
        """list_intake_users

        Returns a list of all intake users within the project and intake.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param page_token: A token to retrieve the next page of results.
        :type page_token: str
        :param page_size: Maximum number of items to return
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_intake_users_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            page_token=page_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListIntakeUsersResponse",
            "401": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def list_intake_users_without_preload_content(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        page_token: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=1024)]],
            Field(description="A token to retrieve the next page of results."),
        ] = None,
        page_size: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Maximum number of items to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_intake_users

        Returns a list of all intake users within the project and intake.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param page_token: A token to retrieve the next page of results.
        :type page_token: str
        :param page_size: Maximum number of items to return
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_intake_users_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            page_token=page_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListIntakeUsersResponse",
            "401": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _list_intake_users_serialize(
        self,
        project_id,
        region_id,
        intake_id,
        page_token,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if intake_id is not None:
            _path_params["intakeId"] = intake_id
        # process the query parameters
        if page_token is not None:

            _query_params.append(("pageToken", page_token))

        if page_size is not None:

            _query_params.append(("pageSize", page_size))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/intakes/{intakeId}/users",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def list_intakes(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        page_token: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=1024)]],
            Field(description="A token to retrieve the next page of results."),
        ] = None,
        page_size: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Maximum number of items to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListIntakesResponse:
        """list_intakes

        Returns a list of all intakes within the project.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param page_token: A token to retrieve the next page of results.
        :type page_token: str
        :param page_size: Maximum number of items to return
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_intakes_serialize(
            project_id=project_id,
            region_id=region_id,
            page_token=page_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListIntakesResponse",
            "401": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def list_intakes_with_http_info(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        page_token: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=1024)]],
            Field(description="A token to retrieve the next page of results."),
        ] = None,
        page_size: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Maximum number of items to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListIntakesResponse]:
        """list_intakes

        Returns a list of all intakes within the project.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param page_token: A token to retrieve the next page of results.
        :type page_token: str
        :param page_size: Maximum number of items to return
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_intakes_serialize(
            project_id=project_id,
            region_id=region_id,
            page_token=page_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListIntakesResponse",
            "401": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def list_intakes_without_preload_content(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        page_token: Annotated[
            Optional[Annotated[str, Field(strict=True, max_length=1024)]],
            Field(description="A token to retrieve the next page of results."),
        ] = None,
        page_size: Annotated[
            Optional[Annotated[int, Field(le=100, strict=True, ge=1)]],
            Field(description="Maximum number of items to return"),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_intakes

        Returns a list of all intakes within the project.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param page_token: A token to retrieve the next page of results.
        :type page_token: str
        :param page_size: Maximum number of items to return
        :type page_size: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._list_intakes_serialize(
            project_id=project_id,
            region_id=region_id,
            page_token=page_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "ListIntakesResponse",
            "401": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _list_intakes_serialize(
        self,
        project_id,
        region_id,
        page_token,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        # process the query parameters
        if page_token is not None:

            _query_params.append(("pageToken", page_token))

        if page_size is not None:

            _query_params.append(("pageSize", page_size))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/intakes",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def update_intake(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        update_intake_payload: UpdateIntakePayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IntakeResponse:
        """update_intake

        Updates the given intake.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param update_intake_payload: (required)
        :type update_intake_payload: UpdateIntakePayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._update_intake_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            update_intake_payload=update_intake_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "IntakeResponse",
            "401": None,
            "404": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def update_intake_with_http_info(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        update_intake_payload: UpdateIntakePayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IntakeResponse]:
        """update_intake

        Updates the given intake.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param update_intake_payload: (required)
        :type update_intake_payload: UpdateIntakePayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._update_intake_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            update_intake_payload=update_intake_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "IntakeResponse",
            "401": None,
            "404": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def update_intake_without_preload_content(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        update_intake_payload: UpdateIntakePayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_intake

        Updates the given intake.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param update_intake_payload: (required)
        :type update_intake_payload: UpdateIntakePayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._update_intake_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            update_intake_payload=update_intake_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "IntakeResponse",
            "401": None,
            "404": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _update_intake_serialize(
        self,
        project_id,
        region_id,
        intake_id,
        update_intake_payload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if intake_id is not None:
            _path_params["intakeId"] = intake_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_intake_payload is not None:
            _body_params = update_intake_payload

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(["application/json"])

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/intakes/{intakeId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def update_intake_runner(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_runner_id: Annotated[StrictStr, Field(description="The intake runner UUID.")],
        update_intake_runner_payload: UpdateIntakeRunnerPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """update_intake_runner

        Updates a intake runner within the project.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_runner_id: The intake runner UUID. (required)
        :type intake_runner_id: str
        :param update_intake_runner_payload: (required)
        :type update_intake_runner_payload: UpdateIntakeRunnerPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._update_intake_runner_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_runner_id=intake_runner_id,
            update_intake_runner_payload=update_intake_runner_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": None,
            "401": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def update_intake_runner_with_http_info(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_runner_id: Annotated[StrictStr, Field(description="The intake runner UUID.")],
        update_intake_runner_payload: UpdateIntakeRunnerPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """update_intake_runner

        Updates a intake runner within the project.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_runner_id: The intake runner UUID. (required)
        :type intake_runner_id: str
        :param update_intake_runner_payload: (required)
        :type update_intake_runner_payload: UpdateIntakeRunnerPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._update_intake_runner_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_runner_id=intake_runner_id,
            update_intake_runner_payload=update_intake_runner_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": None,
            "401": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def update_intake_runner_without_preload_content(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_runner_id: Annotated[StrictStr, Field(description="The intake runner UUID.")],
        update_intake_runner_payload: UpdateIntakeRunnerPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_intake_runner

        Updates a intake runner within the project.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_runner_id: The intake runner UUID. (required)
        :type intake_runner_id: str
        :param update_intake_runner_payload: (required)
        :type update_intake_runner_payload: UpdateIntakeRunnerPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._update_intake_runner_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_runner_id=intake_runner_id,
            update_intake_runner_payload=update_intake_runner_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "400": None,
            "401": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _update_intake_runner_serialize(
        self,
        project_id,
        region_id,
        intake_runner_id,
        update_intake_runner_payload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if intake_runner_id is not None:
            _path_params["intakeRunnerId"] = intake_runner_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_intake_runner_payload is not None:
            _body_params = update_intake_runner_payload

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/intake-runners/{intakeRunnerId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def update_intake_user(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        intake_user_id: Annotated[StrictStr, Field(description="The intake user UUID.")],
        update_intake_user_payload: UpdateIntakeUserPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """update_intake_user

        Updates the given intake user.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param intake_user_id: The intake user UUID. (required)
        :type intake_user_id: str
        :param update_intake_user_payload: (required)
        :type update_intake_user_payload: UpdateIntakeUserPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._update_intake_user_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            intake_user_id=intake_user_id,
            update_intake_user_payload=update_intake_user_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "401": None,
            "404": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def update_intake_user_with_http_info(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        intake_user_id: Annotated[StrictStr, Field(description="The intake user UUID.")],
        update_intake_user_payload: UpdateIntakeUserPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """update_intake_user

        Updates the given intake user.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param intake_user_id: The intake user UUID. (required)
        :type intake_user_id: str
        :param update_intake_user_payload: (required)
        :type update_intake_user_payload: UpdateIntakeUserPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._update_intake_user_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            intake_user_id=intake_user_id,
            update_intake_user_payload=update_intake_user_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "401": None,
            "404": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def update_intake_user_without_preload_content(
        self,
        project_id: Annotated[
            StrictStr, Field(description="The STACKIT portal project UUID the resource is located in.")
        ],
        region_id: Annotated[StrictStr, Field(description="The STACKIT region name the resource is located in.")],
        intake_id: Annotated[StrictStr, Field(description="The intake UUID.")],
        intake_user_id: Annotated[StrictStr, Field(description="The intake user UUID.")],
        update_intake_user_payload: UpdateIntakeUserPayload,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_intake_user

        Updates the given intake user.

        :param project_id: The STACKIT portal project UUID the resource is located in. (required)
        :type project_id: str
        :param region_id: The STACKIT region name the resource is located in. (required)
        :type region_id: str
        :param intake_id: The intake UUID. (required)
        :type intake_id: str
        :param intake_user_id: The intake user UUID. (required)
        :type intake_user_id: str
        :param update_intake_user_payload: (required)
        :type update_intake_user_payload: UpdateIntakeUserPayload
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._update_intake_user_serialize(
            project_id=project_id,
            region_id=region_id,
            intake_id=intake_id,
            intake_user_id=intake_user_id,
            update_intake_user_payload=update_intake_user_payload,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "204": None,
            "401": None,
            "404": None,
            "409": None,
            "500": None,
        }
        response_data = self.api_client.call_api(*_param, _request_timeout=_request_timeout)
        return response_data.response

    def _update_intake_user_serialize(
        self,
        project_id,
        region_id,
        intake_id,
        intake_user_id,
        update_intake_user_payload,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params["projectId"] = project_id
        if region_id is not None:
            _path_params["regionId"] = region_id
        if intake_id is not None:
            _path_params["intakeId"] = intake_id
        if intake_user_id is not None:
            _path_params["intakeUserId"] = intake_user_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if update_intake_user_payload is not None:
            _body_params = update_intake_user_payload

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(["application/json"])
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/v1beta/projects/{projectId}/regions/{regionId}/intakes/{intakeId}/users/{intakeUserId}",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
