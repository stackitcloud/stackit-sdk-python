# coding: utf-8

"""
    STACKIT Intake API

    This API provides endpoints for managing Intakes. 

    The version of the OpenAPI document: 1beta.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Annotated, Self


class UpdateIntakeRunnerPayload(BaseModel):
    """
    UpdateIntakeRunnerPayload
    """  # noqa: E501

    description: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(
        default=None,
        description="The description is a longer text chosen by the user to provide more context for the resource.",
    )
    display_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=32)]] = Field(
        default=None,
        description="The display name is a short name chosen by the user to identify the resource.",
        alias="displayName",
    )
    labels: Optional[Dict[str, StrictStr]] = Field(
        default=None,
        description="Labels are key-value pairs associated with the resource. To update labels:   - Provide a new set of key-value pairs to replace the existing labels.   - Send empty object `{}` to remove all labels.   - Omit this field to leave the labels unchanged. ",
    )
    max_message_size_ki_b: StrictInt = Field(
        description="The maximum size of a message in kibibytes (1 KiB = 1024 bytes).", alias="maxMessageSizeKiB"
    )
    max_messages_per_hour: StrictInt = Field(
        description="The maximum number of messages per hour.", alias="maxMessagesPerHour"
    )
    __properties: ClassVar[List[str]] = [
        "description",
        "displayName",
        "labels",
        "maxMessageSizeKiB",
        "maxMessagesPerHour",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateIntakeRunnerPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if labels (nullable) is None
        # and model_fields_set contains the field
        if self.labels is None and "labels" in self.model_fields_set:
            _dict["labels"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateIntakeRunnerPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "description": obj.get("description"),
                "displayName": obj.get("displayName"),
                "labels": obj.get("labels"),
                "maxMessageSizeKiB": obj.get("maxMessageSizeKiB"),
                "maxMessagesPerHour": obj.get("maxMessagesPerHour"),
            }
        )
        return _obj
