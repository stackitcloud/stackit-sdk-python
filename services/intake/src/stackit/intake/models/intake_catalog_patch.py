# coding: utf-8

"""
    STACKIT Intake API

    This API provides endpoints for managing Intakes. 

    The version of the OpenAPI document: 1beta.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Annotated, Self

from stackit.intake.models.catalog_auth_patch import CatalogAuthPatch


class IntakeCatalogPatch(BaseModel):
    """
    The Iceberg catalog configuration
    """  # noqa: E501

    auth: Optional[CatalogAuthPatch] = None
    namespace: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(
        default="intake",
        description="The namespace to which data shall be written. It will be automatically created, if it does not exist.",
    )
    table_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=32)]] = Field(
        default=None,
        description="The table name is a short name chosen by the user to identify the table in Iceberg.",
        alias="tableName",
    )
    uri: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(
        default=None, description="The URI to the Iceberg catalog endpoint"
    )
    warehouse: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(
        default=None,
        description="The Iceberg warehouse to connect to, required when the catalog has no default warehouse configured.",
    )
    __properties: ClassVar[List[str]] = ["auth", "namespace", "tableName", "uri", "warehouse"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntakeCatalogPatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auth
        if self.auth:
            _dict["auth"] = self.auth.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntakeCatalogPatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "auth": CatalogAuthPatch.from_dict(obj["auth"]) if obj.get("auth") is not None else None,
                "namespace": obj.get("namespace") if obj.get("namespace") is not None else "intake",
                "tableName": obj.get("tableName"),
                "uri": obj.get("uri"),
                "warehouse": obj.get("warehouse"),
            }
        )
        return _obj
