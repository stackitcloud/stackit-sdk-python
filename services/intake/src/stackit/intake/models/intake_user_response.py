# coding: utf-8

"""
    STACKIT Intake API

    This API provides endpoints for managing Intakes. 

    The version of the OpenAPI document: 1beta.2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Annotated, Self

from stackit.intake.models.client_config import ClientConfig
from stackit.intake.models.user_type import UserType


class IntakeUserResponse(BaseModel):
    """
    IntakeUserResponse
    """  # noqa: E501

    client_config: Optional[ClientConfig] = Field(default=None, alias="clientConfig")
    create_time: datetime = Field(description="The point in time the resource was created.")
    description: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(
        default=None,
        description="The description is a longer text chosen by the user to provide more context for the resource.",
    )
    display_name: Annotated[str, Field(min_length=1, strict=True, max_length=32)] = Field(
        description="The display name is a short name chosen by the user to identify the resource.", alias="displayName"
    )
    id: StrictStr = Field(description="A auto generated unique id which identifies the resource.")
    labels: Optional[Dict[str, StrictStr]] = Field(
        default=None, description="Labels are a set of key-value pairs assigned to resources."
    )
    state: StrictStr = Field(description="The current state of the resource.")
    type: UserType
    user: Annotated[str, Field(strict=True, max_length=1024)] = Field(description="The user to connect to the intake.")
    __properties: ClassVar[List[str]] = [
        "clientConfig",
        "create_time",
        "description",
        "displayName",
        "id",
        "labels",
        "state",
        "type",
        "user",
    ]

    @field_validator("state")
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["reconciling", "active", "deleting"]):
            raise ValueError("must be one of enum values ('reconciling', 'active', 'deleting')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntakeUserResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_config
        if self.client_config:
            _dict["clientConfig"] = self.client_config.to_dict()
        # set to None if labels (nullable) is None
        # and model_fields_set contains the field
        if self.labels is None and "labels" in self.model_fields_set:
            _dict["labels"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntakeUserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "clientConfig": (
                    ClientConfig.from_dict(obj["clientConfig"]) if obj.get("clientConfig") is not None else None
                ),
                "create_time": obj.get("create_time"),
                "description": obj.get("description"),
                "displayName": obj.get("displayName"),
                "id": obj.get("id"),
                "labels": obj.get("labels"),
                "state": obj.get("state"),
                "type": obj.get("type") if obj.get("type") is not None else UserType.INTAKE,
                "user": obj.get("user"),
            }
        )
        return _obj
